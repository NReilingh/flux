// DO NOT EDIT: This file is autogenerated via the builtin command.

package sample

import (
	ast "github.com/influxdata/flux/ast"
	runtime "github.com/influxdata/flux/runtime"
)

func init() {
	runtime.RegisterPackage(pkgAST)
}

var pkgAST = &ast.Package{
	BaseNode: ast.BaseNode{
		Comments: nil,
		Errors:   nil,
		Loc:      nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Comments: nil,
			Errors:   nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 2,
					Line:   134,
				},
				File:   "sample.flux",
				Source: "package sample\n\n\nimport \"array\"\nimport \"dict\"\nimport \"experimental/csv\"\n\nsets = [\n    \"airSensor\": {\n        url: \"https://influx-testdata.s3.amazonaws.com/air-sensor-data-annotated.csv\",\n        desc: \"Simulated office building air sensor data with temperature, humidity, and carbon monoxide metrics. Data is updated approximately every 15m.\",\n        size: \"~600 KB\",\n        type: \"live\",\n    },\n    \"birdMigration\": {\n        url: \"https://influx-testdata.s3.amazonaws.com/bird-migration.csv\",\n        desc: \"2019 African bird migration data from the \\\"Movebank: Animal Tracking\\\" dataset. Contains geotemporal data between 2019-01-01 and 2019-12-31.\",\n        size: \"~1.2 MB\",\n        type: \"static\",\n    },\n    \"bitcoin\": {\n        url: \"https://influx-testdata.s3.amazonaws.com/bitcoin-historical-annotated.csv\",\n        desc: \"Bitcoin price data from the last 30 days – Powered by CoinDesk – https://www.coindesk.com/price/bitcoin. Data is updated approximately every 15m.\",\n        size: \"~700 KB\",\n        type: \"live\",\n    },\n    \"machineProduction\": {\n        url: \"https://influx-testdata.s3.amazonaws.com/machine-production.csv\",\n        desc: \"States and metrics reported from four automated grinding wheel stations on a production line. Contains data from 2021-08-01.\",\n        size: \"~11.9 MB\",\n        type: \"static\",\n    },\n    \"noaa\": {\n        url: \"https://influx-testdata.s3.amazonaws.com/noaa-ndbc-latest-observations-annotated.csv\",\n        desc: \"Latest observations from the NOAA National Data Buoy Center (NDBC). Contains only the most recent observations (no historical data). Data is updated approximately every 15m.\",\n        size: \"~1.3 MB\",\n        type: \"live\",\n    },\n    \"noaaWater\": {\n        url: \"https://influx-testdata.s3.amazonaws.com/noaa.csv\",\n        desc: \"Water level observations from two stations reported by the NOAA Center for Operational Oceanographic Products and Services. Contains data between 2019-08-17 and 2019-09-17.\",\n        size: \"~10.3 MB\",\n        type: \"static\",\n    },\n    \"usgs\": {\n        url: \"https://influx-testdata.s3.amazonaws.com/usgs-earthquake-all-week-annotated.csv\",\n        desc: \"USGS earthquake data from the last week. Contains geotemporal data collected from USGS seismic sensors around the world. Data is updated approximately every 15m.\",\n        size: \"~6 MB\",\n        type: \"live\",\n    },\n]\n\n_setInfo = (set) => {\n    _setDict = dict.get(dict: sets, key: set, default: {url: \"\", desc: \"\", size: \"\", type: \"\"})\n\n    return {name: set, description: _setDict.desc, url: _setDict.url, size: _setDict.size, type: _setDict.type}\n}\n\n// data downloads a specified InfluxDB sample dataset.\n//\n// ## Parameters\n//\n// - `set` is the sample data set to download and output. Valid datasets:\n//    - **airSensor**: Simulated temperature, humidity, and CO data from an office building.\n//    - **birdMigration**: 2019 African bird migration data from [Movebank: Animal Tracking](https://www.kaggle.com/pulkit8595/movebank-animal-tracking).\n//    - **bitcoin**: Bitcoin price data from the last 30 days _([Powered by CoinDesk](https://www.coindesk.com/price/bitcoin))_.\n//    - **noaa**: Latest observations from the [NOAA National Data Buoy Center (NDBC)](https://www.ndbc.noaa.gov/).\n//    - **machineProduction**: States and metrics reported from four automated grinding wheel stations on a production line.\n//    - **noaaWater**: Water level observations from two stations reported by the NOAA Center for Operational Oceanographic Products and Services between 2019-08-17 and 2019-09-17.\n//    - **usgs**: USGS earthquake data from the last week.\n//\n// ## Load InfluxDB sample data\n//\n// ```\n// import \"influxdata/influxdb/sample\"\n//\n// sample.data(set: \"airSensor\")\n// ```\n//\ndata = (set) => {\n    setInfo = _setInfo(set: set)\n\n    url = if setInfo.url == \"\" then\n        die(msg: \"Invalid sample data set. Use sample.list to view available datasets.\")\n    else\n        setInfo.url\n\n    return csv.from(url: url)\n}\n\n// list outputs information about available InfluxDB sample datasets.\n//\n// ## List available InfluxDB sample datasets\n//\n// ```\n// import \"influxdata/influxdb/sample\"\n//\n// sample.list()\n// ```\n//\nlist = () => array.from(\n    rows: [\n        _setInfo(set: \"airSensor\"),\n        _setInfo(set: \"birdMigration\"),\n        _setInfo(set: \"bitcoin\"),\n        _setInfo(set: \"machineProduction\"),\n        _setInfo(set: \"noaa\"),\n        _setInfo(set: \"noaaWater\"),\n        _setInfo(set: \"usgs\"),\n    ],\n)\n\n// alignToNow shifts time values in input data to align the chronological last point to _now_.\n// When writing static historical sample datasets to **InfluxDB Cloud**, use alignToNow\n// to avoid losing sample data with timestamps outside of the retention period\n// associated with your InfluxDB Cloud account.\n// Input data must have a `_time` column.\n//\n// ## Align sample data to now\n//\n// ```\n// import \"influxdata/influxdb/sample\"\n//\n// sample.data(set: \"birdMigration\")\n//    |> sample.alignToNow()\n// ```\nalignToNow = (tables=<-) => {\n    _lastTime = (tables |> keep(columns: [\"_time\"]) |> last(column: \"_time\") |> findRecord(fn: (key) => true, idx: 0))._time\n    _offset = int(v: now()) - int(v: _lastTime)\n    _offsetDuration = duration(v: _offset)\n\n    return tables |> timeShift(duration: _offsetDuration)\n}",
				Start: ast.Position{
					Column: 1,
					Line:   2,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   52,
					},
					File:   "sample.flux",
					Source: "sets = [\n    \"airSensor\": {\n        url: \"https://influx-testdata.s3.amazonaws.com/air-sensor-data-annotated.csv\",\n        desc: \"Simulated office building air sensor data with temperature, humidity, and carbon monoxide metrics. Data is updated approximately every 15m.\",\n        size: \"~600 KB\",\n        type: \"live\",\n    },\n    \"birdMigration\": {\n        url: \"https://influx-testdata.s3.amazonaws.com/bird-migration.csv\",\n        desc: \"2019 African bird migration data from the \\\"Movebank: Animal Tracking\\\" dataset. Contains geotemporal data between 2019-01-01 and 2019-12-31.\",\n        size: \"~1.2 MB\",\n        type: \"static\",\n    },\n    \"bitcoin\": {\n        url: \"https://influx-testdata.s3.amazonaws.com/bitcoin-historical-annotated.csv\",\n        desc: \"Bitcoin price data from the last 30 days – Powered by CoinDesk – https://www.coindesk.com/price/bitcoin. Data is updated approximately every 15m.\",\n        size: \"~700 KB\",\n        type: \"live\",\n    },\n    \"machineProduction\": {\n        url: \"https://influx-testdata.s3.amazonaws.com/machine-production.csv\",\n        desc: \"States and metrics reported from four automated grinding wheel stations on a production line. Contains data from 2021-08-01.\",\n        size: \"~11.9 MB\",\n        type: \"static\",\n    },\n    \"noaa\": {\n        url: \"https://influx-testdata.s3.amazonaws.com/noaa-ndbc-latest-observations-annotated.csv\",\n        desc: \"Latest observations from the NOAA National Data Buoy Center (NDBC). Contains only the most recent observations (no historical data). Data is updated approximately every 15m.\",\n        size: \"~1.3 MB\",\n        type: \"live\",\n    },\n    \"noaaWater\": {\n        url: \"https://influx-testdata.s3.amazonaws.com/noaa.csv\",\n        desc: \"Water level observations from two stations reported by the NOAA Center for Operational Oceanographic Products and Services. Contains data between 2019-08-17 and 2019-09-17.\",\n        size: \"~10.3 MB\",\n        type: \"static\",\n    },\n    \"usgs\": {\n        url: \"https://influx-testdata.s3.amazonaws.com/usgs-earthquake-all-week-annotated.csv\",\n        desc: \"USGS earthquake data from the last week. Contains geotemporal data collected from USGS seismic sensors around the world. Data is updated approximately every 15m.\",\n        size: \"~6 MB\",\n        type: \"live\",\n    },\n]",
					Start: ast.Position{
						Column: 1,
						Line:   9,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 5,
							Line:   9,
						},
						File:   "sample.flux",
						Source: "sets",
						Start: ast.Position{
							Column: 1,
							Line:   9,
						},
					},
				},
				Name: "sets",
			},
			Init: &ast.DictExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   52,
						},
						File:   "sample.flux",
						Source: "[\n    \"airSensor\": {\n        url: \"https://influx-testdata.s3.amazonaws.com/air-sensor-data-annotated.csv\",\n        desc: \"Simulated office building air sensor data with temperature, humidity, and carbon monoxide metrics. Data is updated approximately every 15m.\",\n        size: \"~600 KB\",\n        type: \"live\",\n    },\n    \"birdMigration\": {\n        url: \"https://influx-testdata.s3.amazonaws.com/bird-migration.csv\",\n        desc: \"2019 African bird migration data from the \\\"Movebank: Animal Tracking\\\" dataset. Contains geotemporal data between 2019-01-01 and 2019-12-31.\",\n        size: \"~1.2 MB\",\n        type: \"static\",\n    },\n    \"bitcoin\": {\n        url: \"https://influx-testdata.s3.amazonaws.com/bitcoin-historical-annotated.csv\",\n        desc: \"Bitcoin price data from the last 30 days – Powered by CoinDesk – https://www.coindesk.com/price/bitcoin. Data is updated approximately every 15m.\",\n        size: \"~700 KB\",\n        type: \"live\",\n    },\n    \"machineProduction\": {\n        url: \"https://influx-testdata.s3.amazonaws.com/machine-production.csv\",\n        desc: \"States and metrics reported from four automated grinding wheel stations on a production line. Contains data from 2021-08-01.\",\n        size: \"~11.9 MB\",\n        type: \"static\",\n    },\n    \"noaa\": {\n        url: \"https://influx-testdata.s3.amazonaws.com/noaa-ndbc-latest-observations-annotated.csv\",\n        desc: \"Latest observations from the NOAA National Data Buoy Center (NDBC). Contains only the most recent observations (no historical data). Data is updated approximately every 15m.\",\n        size: \"~1.3 MB\",\n        type: \"live\",\n    },\n    \"noaaWater\": {\n        url: \"https://influx-testdata.s3.amazonaws.com/noaa.csv\",\n        desc: \"Water level observations from two stations reported by the NOAA Center for Operational Oceanographic Products and Services. Contains data between 2019-08-17 and 2019-09-17.\",\n        size: \"~10.3 MB\",\n        type: \"static\",\n    },\n    \"usgs\": {\n        url: \"https://influx-testdata.s3.amazonaws.com/usgs-earthquake-all-week-annotated.csv\",\n        desc: \"USGS earthquake data from the last week. Contains geotemporal data collected from USGS seismic sensors around the world. Data is updated approximately every 15m.\",\n        size: \"~6 MB\",\n        type: \"live\",\n    },\n]",
						Start: ast.Position{
							Column: 8,
							Line:   9,
						},
					},
				},
				Elements: []*ast.DictItem{&ast.DictItem{
					Comma: nil,
					Key: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 16,
									Line:   10,
								},
								File:   "sample.flux",
								Source: "\"airSensor\"",
								Start: ast.Position{
									Column: 5,
									Line:   10,
								},
							},
						},
						Value: "airSensor",
					},
					Val: &ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 6,
									Line:   15,
								},
								File:   "sample.flux",
								Source: "{\n        url: \"https://influx-testdata.s3.amazonaws.com/air-sensor-data-annotated.csv\",\n        desc: \"Simulated office building air sensor data with temperature, humidity, and carbon monoxide metrics. Data is updated approximately every 15m.\",\n        size: \"~600 KB\",\n        type: \"live\",\n    }",
								Start: ast.Position{
									Column: 18,
									Line:   10,
								},
							},
						},
						Lbrace: nil,
						Properties: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 86,
										Line:   11,
									},
									File:   "sample.flux",
									Source: "url: \"https://influx-testdata.s3.amazonaws.com/air-sensor-data-annotated.csv\"",
									Start: ast.Position{
										Column: 9,
										Line:   11,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 12,
											Line:   11,
										},
										File:   "sample.flux",
										Source: "url",
										Start: ast.Position{
											Column: 9,
											Line:   11,
										},
									},
								},
								Name: "url",
							},
							Separator: nil,
							Value: &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 86,
											Line:   11,
										},
										File:   "sample.flux",
										Source: "\"https://influx-testdata.s3.amazonaws.com/air-sensor-data-annotated.csv\"",
										Start: ast.Position{
											Column: 14,
											Line:   11,
										},
									},
								},
								Value: "https://influx-testdata.s3.amazonaws.com/air-sensor-data-annotated.csv",
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 156,
										Line:   12,
									},
									File:   "sample.flux",
									Source: "desc: \"Simulated office building air sensor data with temperature, humidity, and carbon monoxide metrics. Data is updated approximately every 15m.\"",
									Start: ast.Position{
										Column: 9,
										Line:   12,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   12,
										},
										File:   "sample.flux",
										Source: "desc",
										Start: ast.Position{
											Column: 9,
											Line:   12,
										},
									},
								},
								Name: "desc",
							},
							Separator: nil,
							Value: &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 156,
											Line:   12,
										},
										File:   "sample.flux",
										Source: "\"Simulated office building air sensor data with temperature, humidity, and carbon monoxide metrics. Data is updated approximately every 15m.\"",
										Start: ast.Position{
											Column: 15,
											Line:   12,
										},
									},
								},
								Value: "Simulated office building air sensor data with temperature, humidity, and carbon monoxide metrics. Data is updated approximately every 15m.",
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   13,
									},
									File:   "sample.flux",
									Source: "size: \"~600 KB\"",
									Start: ast.Position{
										Column: 9,
										Line:   13,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   13,
										},
										File:   "sample.flux",
										Source: "size",
										Start: ast.Position{
											Column: 9,
											Line:   13,
										},
									},
								},
								Name: "size",
							},
							Separator: nil,
							Value: &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 24,
											Line:   13,
										},
										File:   "sample.flux",
										Source: "\"~600 KB\"",
										Start: ast.Position{
											Column: 15,
											Line:   13,
										},
									},
								},
								Value: "~600 KB",
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 21,
										Line:   14,
									},
									File:   "sample.flux",
									Source: "type: \"live\"",
									Start: ast.Position{
										Column: 9,
										Line:   14,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   14,
										},
										File:   "sample.flux",
										Source: "type",
										Start: ast.Position{
											Column: 9,
											Line:   14,
										},
									},
								},
								Name: "type",
							},
							Separator: nil,
							Value: &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 21,
											Line:   14,
										},
										File:   "sample.flux",
										Source: "\"live\"",
										Start: ast.Position{
											Column: 15,
											Line:   14,
										},
									},
								},
								Value: "live",
							},
						}},
						Rbrace: nil,
						With:   nil,
					},
				}, &ast.DictItem{
					Comma: nil,
					Key: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 20,
									Line:   16,
								},
								File:   "sample.flux",
								Source: "\"birdMigration\"",
								Start: ast.Position{
									Column: 5,
									Line:   16,
								},
							},
						},
						Value: "birdMigration",
					},
					Val: &ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 6,
									Line:   21,
								},
								File:   "sample.flux",
								Source: "{\n        url: \"https://influx-testdata.s3.amazonaws.com/bird-migration.csv\",\n        desc: \"2019 African bird migration data from the \\\"Movebank: Animal Tracking\\\" dataset. Contains geotemporal data between 2019-01-01 and 2019-12-31.\",\n        size: \"~1.2 MB\",\n        type: \"static\",\n    }",
								Start: ast.Position{
									Column: 22,
									Line:   16,
								},
							},
						},
						Lbrace: nil,
						Properties: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 75,
										Line:   17,
									},
									File:   "sample.flux",
									Source: "url: \"https://influx-testdata.s3.amazonaws.com/bird-migration.csv\"",
									Start: ast.Position{
										Column: 9,
										Line:   17,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 12,
											Line:   17,
										},
										File:   "sample.flux",
										Source: "url",
										Start: ast.Position{
											Column: 9,
											Line:   17,
										},
									},
								},
								Name: "url",
							},
							Separator: nil,
							Value: &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 75,
											Line:   17,
										},
										File:   "sample.flux",
										Source: "\"https://influx-testdata.s3.amazonaws.com/bird-migration.csv\"",
										Start: ast.Position{
											Column: 14,
											Line:   17,
										},
									},
								},
								Value: "https://influx-testdata.s3.amazonaws.com/bird-migration.csv",
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 158,
										Line:   18,
									},
									File:   "sample.flux",
									Source: "desc: \"2019 African bird migration data from the \\\"Movebank: Animal Tracking\\\" dataset. Contains geotemporal data between 2019-01-01 and 2019-12-31.\"",
									Start: ast.Position{
										Column: 9,
										Line:   18,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   18,
										},
										File:   "sample.flux",
										Source: "desc",
										Start: ast.Position{
											Column: 9,
											Line:   18,
										},
									},
								},
								Name: "desc",
							},
							Separator: nil,
							Value: &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 158,
											Line:   18,
										},
										File:   "sample.flux",
										Source: "\"2019 African bird migration data from the \\\"Movebank: Animal Tracking\\\" dataset. Contains geotemporal data between 2019-01-01 and 2019-12-31.\"",
										Start: ast.Position{
											Column: 15,
											Line:   18,
										},
									},
								},
								Value: "2019 African bird migration data from the \"Movebank: Animal Tracking\" dataset. Contains geotemporal data between 2019-01-01 and 2019-12-31.",
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   19,
									},
									File:   "sample.flux",
									Source: "size: \"~1.2 MB\"",
									Start: ast.Position{
										Column: 9,
										Line:   19,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   19,
										},
										File:   "sample.flux",
										Source: "size",
										Start: ast.Position{
											Column: 9,
											Line:   19,
										},
									},
								},
								Name: "size",
							},
							Separator: nil,
							Value: &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 24,
											Line:   19,
										},
										File:   "sample.flux",
										Source: "\"~1.2 MB\"",
										Start: ast.Position{
											Column: 15,
											Line:   19,
										},
									},
								},
								Value: "~1.2 MB",
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   20,
									},
									File:   "sample.flux",
									Source: "type: \"static\"",
									Start: ast.Position{
										Column: 9,
										Line:   20,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   20,
										},
										File:   "sample.flux",
										Source: "type",
										Start: ast.Position{
											Column: 9,
											Line:   20,
										},
									},
								},
								Name: "type",
							},
							Separator: nil,
							Value: &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 23,
											Line:   20,
										},
										File:   "sample.flux",
										Source: "\"static\"",
										Start: ast.Position{
											Column: 15,
											Line:   20,
										},
									},
								},
								Value: "static",
							},
						}},
						Rbrace: nil,
						With:   nil,
					},
				}, &ast.DictItem{
					Comma: nil,
					Key: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 14,
									Line:   22,
								},
								File:   "sample.flux",
								Source: "\"bitcoin\"",
								Start: ast.Position{
									Column: 5,
									Line:   22,
								},
							},
						},
						Value: "bitcoin",
					},
					Val: &ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 6,
									Line:   27,
								},
								File:   "sample.flux",
								Source: "{\n        url: \"https://influx-testdata.s3.amazonaws.com/bitcoin-historical-annotated.csv\",\n        desc: \"Bitcoin price data from the last 30 days – Powered by CoinDesk – https://www.coindesk.com/price/bitcoin. Data is updated approximately every 15m.\",\n        size: \"~700 KB\",\n        type: \"live\",\n    }",
								Start: ast.Position{
									Column: 16,
									Line:   22,
								},
							},
						},
						Lbrace: nil,
						Properties: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 89,
										Line:   23,
									},
									File:   "sample.flux",
									Source: "url: \"https://influx-testdata.s3.amazonaws.com/bitcoin-historical-annotated.csv\"",
									Start: ast.Position{
										Column: 9,
										Line:   23,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 12,
											Line:   23,
										},
										File:   "sample.flux",
										Source: "url",
										Start: ast.Position{
											Column: 9,
											Line:   23,
										},
									},
								},
								Name: "url",
							},
							Separator: nil,
							Value: &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 89,
											Line:   23,
										},
										File:   "sample.flux",
										Source: "\"https://influx-testdata.s3.amazonaws.com/bitcoin-historical-annotated.csv\"",
										Start: ast.Position{
											Column: 14,
											Line:   23,
										},
									},
								},
								Value: "https://influx-testdata.s3.amazonaws.com/bitcoin-historical-annotated.csv",
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 166,
										Line:   24,
									},
									File:   "sample.flux",
									Source: "desc: \"Bitcoin price data from the last 30 days – Powered by CoinDesk – https://www.coindesk.com/price/bitcoin. Data is updated approximately every 15m.\"",
									Start: ast.Position{
										Column: 9,
										Line:   24,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   24,
										},
										File:   "sample.flux",
										Source: "desc",
										Start: ast.Position{
											Column: 9,
											Line:   24,
										},
									},
								},
								Name: "desc",
							},
							Separator: nil,
							Value: &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 166,
											Line:   24,
										},
										File:   "sample.flux",
										Source: "\"Bitcoin price data from the last 30 days – Powered by CoinDesk – https://www.coindesk.com/price/bitcoin. Data is updated approximately every 15m.\"",
										Start: ast.Position{
											Column: 15,
											Line:   24,
										},
									},
								},
								Value: "Bitcoin price data from the last 30 days – Powered by CoinDesk – https://www.coindesk.com/price/bitcoin. Data is updated approximately every 15m.",
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   25,
									},
									File:   "sample.flux",
									Source: "size: \"~700 KB\"",
									Start: ast.Position{
										Column: 9,
										Line:   25,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   25,
										},
										File:   "sample.flux",
										Source: "size",
										Start: ast.Position{
											Column: 9,
											Line:   25,
										},
									},
								},
								Name: "size",
							},
							Separator: nil,
							Value: &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 24,
											Line:   25,
										},
										File:   "sample.flux",
										Source: "\"~700 KB\"",
										Start: ast.Position{
											Column: 15,
											Line:   25,
										},
									},
								},
								Value: "~700 KB",
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 21,
										Line:   26,
									},
									File:   "sample.flux",
									Source: "type: \"live\"",
									Start: ast.Position{
										Column: 9,
										Line:   26,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   26,
										},
										File:   "sample.flux",
										Source: "type",
										Start: ast.Position{
											Column: 9,
											Line:   26,
										},
									},
								},
								Name: "type",
							},
							Separator: nil,
							Value: &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 21,
											Line:   26,
										},
										File:   "sample.flux",
										Source: "\"live\"",
										Start: ast.Position{
											Column: 15,
											Line:   26,
										},
									},
								},
								Value: "live",
							},
						}},
						Rbrace: nil,
						With:   nil,
					},
				}, &ast.DictItem{
					Comma: nil,
					Key: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 24,
									Line:   28,
								},
								File:   "sample.flux",
								Source: "\"machineProduction\"",
								Start: ast.Position{
									Column: 5,
									Line:   28,
								},
							},
						},
						Value: "machineProduction",
					},
					Val: &ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 6,
									Line:   33,
								},
								File:   "sample.flux",
								Source: "{\n        url: \"https://influx-testdata.s3.amazonaws.com/machine-production.csv\",\n        desc: \"States and metrics reported from four automated grinding wheel stations on a production line. Contains data from 2021-08-01.\",\n        size: \"~11.9 MB\",\n        type: \"static\",\n    }",
								Start: ast.Position{
									Column: 26,
									Line:   28,
								},
							},
						},
						Lbrace: nil,
						Properties: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 79,
										Line:   29,
									},
									File:   "sample.flux",
									Source: "url: \"https://influx-testdata.s3.amazonaws.com/machine-production.csv\"",
									Start: ast.Position{
										Column: 9,
										Line:   29,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 12,
											Line:   29,
										},
										File:   "sample.flux",
										Source: "url",
										Start: ast.Position{
											Column: 9,
											Line:   29,
										},
									},
								},
								Name: "url",
							},
							Separator: nil,
							Value: &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 79,
											Line:   29,
										},
										File:   "sample.flux",
										Source: "\"https://influx-testdata.s3.amazonaws.com/machine-production.csv\"",
										Start: ast.Position{
											Column: 14,
											Line:   29,
										},
									},
								},
								Value: "https://influx-testdata.s3.amazonaws.com/machine-production.csv",
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 141,
										Line:   30,
									},
									File:   "sample.flux",
									Source: "desc: \"States and metrics reported from four automated grinding wheel stations on a production line. Contains data from 2021-08-01.\"",
									Start: ast.Position{
										Column: 9,
										Line:   30,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   30,
										},
										File:   "sample.flux",
										Source: "desc",
										Start: ast.Position{
											Column: 9,
											Line:   30,
										},
									},
								},
								Name: "desc",
							},
							Separator: nil,
							Value: &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 141,
											Line:   30,
										},
										File:   "sample.flux",
										Source: "\"States and metrics reported from four automated grinding wheel stations on a production line. Contains data from 2021-08-01.\"",
										Start: ast.Position{
											Column: 15,
											Line:   30,
										},
									},
								},
								Value: "States and metrics reported from four automated grinding wheel stations on a production line. Contains data from 2021-08-01.",
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   31,
									},
									File:   "sample.flux",
									Source: "size: \"~11.9 MB\"",
									Start: ast.Position{
										Column: 9,
										Line:   31,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   31,
										},
										File:   "sample.flux",
										Source: "size",
										Start: ast.Position{
											Column: 9,
											Line:   31,
										},
									},
								},
								Name: "size",
							},
							Separator: nil,
							Value: &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 25,
											Line:   31,
										},
										File:   "sample.flux",
										Source: "\"~11.9 MB\"",
										Start: ast.Position{
											Column: 15,
											Line:   31,
										},
									},
								},
								Value: "~11.9 MB",
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   32,
									},
									File:   "sample.flux",
									Source: "type: \"static\"",
									Start: ast.Position{
										Column: 9,
										Line:   32,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   32,
										},
										File:   "sample.flux",
										Source: "type",
										Start: ast.Position{
											Column: 9,
											Line:   32,
										},
									},
								},
								Name: "type",
							},
							Separator: nil,
							Value: &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 23,
											Line:   32,
										},
										File:   "sample.flux",
										Source: "\"static\"",
										Start: ast.Position{
											Column: 15,
											Line:   32,
										},
									},
								},
								Value: "static",
							},
						}},
						Rbrace: nil,
						With:   nil,
					},
				}, &ast.DictItem{
					Comma: nil,
					Key: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 11,
									Line:   34,
								},
								File:   "sample.flux",
								Source: "\"noaa\"",
								Start: ast.Position{
									Column: 5,
									Line:   34,
								},
							},
						},
						Value: "noaa",
					},
					Val: &ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 6,
									Line:   39,
								},
								File:   "sample.flux",
								Source: "{\n        url: \"https://influx-testdata.s3.amazonaws.com/noaa-ndbc-latest-observations-annotated.csv\",\n        desc: \"Latest observations from the NOAA National Data Buoy Center (NDBC). Contains only the most recent observations (no historical data). Data is updated approximately every 15m.\",\n        size: \"~1.3 MB\",\n        type: \"live\",\n    }",
								Start: ast.Position{
									Column: 13,
									Line:   34,
								},
							},
						},
						Lbrace: nil,
						Properties: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 100,
										Line:   35,
									},
									File:   "sample.flux",
									Source: "url: \"https://influx-testdata.s3.amazonaws.com/noaa-ndbc-latest-observations-annotated.csv\"",
									Start: ast.Position{
										Column: 9,
										Line:   35,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 12,
											Line:   35,
										},
										File:   "sample.flux",
										Source: "url",
										Start: ast.Position{
											Column: 9,
											Line:   35,
										},
									},
								},
								Name: "url",
							},
							Separator: nil,
							Value: &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 100,
											Line:   35,
										},
										File:   "sample.flux",
										Source: "\"https://influx-testdata.s3.amazonaws.com/noaa-ndbc-latest-observations-annotated.csv\"",
										Start: ast.Position{
											Column: 14,
											Line:   35,
										},
									},
								},
								Value: "https://influx-testdata.s3.amazonaws.com/noaa-ndbc-latest-observations-annotated.csv",
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 190,
										Line:   36,
									},
									File:   "sample.flux",
									Source: "desc: \"Latest observations from the NOAA National Data Buoy Center (NDBC). Contains only the most recent observations (no historical data). Data is updated approximately every 15m.\"",
									Start: ast.Position{
										Column: 9,
										Line:   36,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   36,
										},
										File:   "sample.flux",
										Source: "desc",
										Start: ast.Position{
											Column: 9,
											Line:   36,
										},
									},
								},
								Name: "desc",
							},
							Separator: nil,
							Value: &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 190,
											Line:   36,
										},
										File:   "sample.flux",
										Source: "\"Latest observations from the NOAA National Data Buoy Center (NDBC). Contains only the most recent observations (no historical data). Data is updated approximately every 15m.\"",
										Start: ast.Position{
											Column: 15,
											Line:   36,
										},
									},
								},
								Value: "Latest observations from the NOAA National Data Buoy Center (NDBC). Contains only the most recent observations (no historical data). Data is updated approximately every 15m.",
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   37,
									},
									File:   "sample.flux",
									Source: "size: \"~1.3 MB\"",
									Start: ast.Position{
										Column: 9,
										Line:   37,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   37,
										},
										File:   "sample.flux",
										Source: "size",
										Start: ast.Position{
											Column: 9,
											Line:   37,
										},
									},
								},
								Name: "size",
							},
							Separator: nil,
							Value: &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 24,
											Line:   37,
										},
										File:   "sample.flux",
										Source: "\"~1.3 MB\"",
										Start: ast.Position{
											Column: 15,
											Line:   37,
										},
									},
								},
								Value: "~1.3 MB",
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 21,
										Line:   38,
									},
									File:   "sample.flux",
									Source: "type: \"live\"",
									Start: ast.Position{
										Column: 9,
										Line:   38,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   38,
										},
										File:   "sample.flux",
										Source: "type",
										Start: ast.Position{
											Column: 9,
											Line:   38,
										},
									},
								},
								Name: "type",
							},
							Separator: nil,
							Value: &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 21,
											Line:   38,
										},
										File:   "sample.flux",
										Source: "\"live\"",
										Start: ast.Position{
											Column: 15,
											Line:   38,
										},
									},
								},
								Value: "live",
							},
						}},
						Rbrace: nil,
						With:   nil,
					},
				}, &ast.DictItem{
					Comma: nil,
					Key: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 16,
									Line:   40,
								},
								File:   "sample.flux",
								Source: "\"noaaWater\"",
								Start: ast.Position{
									Column: 5,
									Line:   40,
								},
							},
						},
						Value: "noaaWater",
					},
					Val: &ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 6,
									Line:   45,
								},
								File:   "sample.flux",
								Source: "{\n        url: \"https://influx-testdata.s3.amazonaws.com/noaa.csv\",\n        desc: \"Water level observations from two stations reported by the NOAA Center for Operational Oceanographic Products and Services. Contains data between 2019-08-17 and 2019-09-17.\",\n        size: \"~10.3 MB\",\n        type: \"static\",\n    }",
								Start: ast.Position{
									Column: 18,
									Line:   40,
								},
							},
						},
						Lbrace: nil,
						Properties: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 65,
										Line:   41,
									},
									File:   "sample.flux",
									Source: "url: \"https://influx-testdata.s3.amazonaws.com/noaa.csv\"",
									Start: ast.Position{
										Column: 9,
										Line:   41,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 12,
											Line:   41,
										},
										File:   "sample.flux",
										Source: "url",
										Start: ast.Position{
											Column: 9,
											Line:   41,
										},
									},
								},
								Name: "url",
							},
							Separator: nil,
							Value: &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 65,
											Line:   41,
										},
										File:   "sample.flux",
										Source: "\"https://influx-testdata.s3.amazonaws.com/noaa.csv\"",
										Start: ast.Position{
											Column: 14,
											Line:   41,
										},
									},
								},
								Value: "https://influx-testdata.s3.amazonaws.com/noaa.csv",
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 189,
										Line:   42,
									},
									File:   "sample.flux",
									Source: "desc: \"Water level observations from two stations reported by the NOAA Center for Operational Oceanographic Products and Services. Contains data between 2019-08-17 and 2019-09-17.\"",
									Start: ast.Position{
										Column: 9,
										Line:   42,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   42,
										},
										File:   "sample.flux",
										Source: "desc",
										Start: ast.Position{
											Column: 9,
											Line:   42,
										},
									},
								},
								Name: "desc",
							},
							Separator: nil,
							Value: &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 189,
											Line:   42,
										},
										File:   "sample.flux",
										Source: "\"Water level observations from two stations reported by the NOAA Center for Operational Oceanographic Products and Services. Contains data between 2019-08-17 and 2019-09-17.\"",
										Start: ast.Position{
											Column: 15,
											Line:   42,
										},
									},
								},
								Value: "Water level observations from two stations reported by the NOAA Center for Operational Oceanographic Products and Services. Contains data between 2019-08-17 and 2019-09-17.",
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   43,
									},
									File:   "sample.flux",
									Source: "size: \"~10.3 MB\"",
									Start: ast.Position{
										Column: 9,
										Line:   43,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   43,
										},
										File:   "sample.flux",
										Source: "size",
										Start: ast.Position{
											Column: 9,
											Line:   43,
										},
									},
								},
								Name: "size",
							},
							Separator: nil,
							Value: &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 25,
											Line:   43,
										},
										File:   "sample.flux",
										Source: "\"~10.3 MB\"",
										Start: ast.Position{
											Column: 15,
											Line:   43,
										},
									},
								},
								Value: "~10.3 MB",
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   44,
									},
									File:   "sample.flux",
									Source: "type: \"static\"",
									Start: ast.Position{
										Column: 9,
										Line:   44,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   44,
										},
										File:   "sample.flux",
										Source: "type",
										Start: ast.Position{
											Column: 9,
											Line:   44,
										},
									},
								},
								Name: "type",
							},
							Separator: nil,
							Value: &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 23,
											Line:   44,
										},
										File:   "sample.flux",
										Source: "\"static\"",
										Start: ast.Position{
											Column: 15,
											Line:   44,
										},
									},
								},
								Value: "static",
							},
						}},
						Rbrace: nil,
						With:   nil,
					},
				}, &ast.DictItem{
					Comma: nil,
					Key: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 11,
									Line:   46,
								},
								File:   "sample.flux",
								Source: "\"usgs\"",
								Start: ast.Position{
									Column: 5,
									Line:   46,
								},
							},
						},
						Value: "usgs",
					},
					Val: &ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 6,
									Line:   51,
								},
								File:   "sample.flux",
								Source: "{\n        url: \"https://influx-testdata.s3.amazonaws.com/usgs-earthquake-all-week-annotated.csv\",\n        desc: \"USGS earthquake data from the last week. Contains geotemporal data collected from USGS seismic sensors around the world. Data is updated approximately every 15m.\",\n        size: \"~6 MB\",\n        type: \"live\",\n    }",
								Start: ast.Position{
									Column: 13,
									Line:   46,
								},
							},
						},
						Lbrace: nil,
						Properties: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 95,
										Line:   47,
									},
									File:   "sample.flux",
									Source: "url: \"https://influx-testdata.s3.amazonaws.com/usgs-earthquake-all-week-annotated.csv\"",
									Start: ast.Position{
										Column: 9,
										Line:   47,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 12,
											Line:   47,
										},
										File:   "sample.flux",
										Source: "url",
										Start: ast.Position{
											Column: 9,
											Line:   47,
										},
									},
								},
								Name: "url",
							},
							Separator: nil,
							Value: &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 95,
											Line:   47,
										},
										File:   "sample.flux",
										Source: "\"https://influx-testdata.s3.amazonaws.com/usgs-earthquake-all-week-annotated.csv\"",
										Start: ast.Position{
											Column: 14,
											Line:   47,
										},
									},
								},
								Value: "https://influx-testdata.s3.amazonaws.com/usgs-earthquake-all-week-annotated.csv",
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 178,
										Line:   48,
									},
									File:   "sample.flux",
									Source: "desc: \"USGS earthquake data from the last week. Contains geotemporal data collected from USGS seismic sensors around the world. Data is updated approximately every 15m.\"",
									Start: ast.Position{
										Column: 9,
										Line:   48,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   48,
										},
										File:   "sample.flux",
										Source: "desc",
										Start: ast.Position{
											Column: 9,
											Line:   48,
										},
									},
								},
								Name: "desc",
							},
							Separator: nil,
							Value: &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 178,
											Line:   48,
										},
										File:   "sample.flux",
										Source: "\"USGS earthquake data from the last week. Contains geotemporal data collected from USGS seismic sensors around the world. Data is updated approximately every 15m.\"",
										Start: ast.Position{
											Column: 15,
											Line:   48,
										},
									},
								},
								Value: "USGS earthquake data from the last week. Contains geotemporal data collected from USGS seismic sensors around the world. Data is updated approximately every 15m.",
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   49,
									},
									File:   "sample.flux",
									Source: "size: \"~6 MB\"",
									Start: ast.Position{
										Column: 9,
										Line:   49,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   49,
										},
										File:   "sample.flux",
										Source: "size",
										Start: ast.Position{
											Column: 9,
											Line:   49,
										},
									},
								},
								Name: "size",
							},
							Separator: nil,
							Value: &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 22,
											Line:   49,
										},
										File:   "sample.flux",
										Source: "\"~6 MB\"",
										Start: ast.Position{
											Column: 15,
											Line:   49,
										},
									},
								},
								Value: "~6 MB",
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 21,
										Line:   50,
									},
									File:   "sample.flux",
									Source: "type: \"live\"",
									Start: ast.Position{
										Column: 9,
										Line:   50,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   50,
										},
										File:   "sample.flux",
										Source: "type",
										Start: ast.Position{
											Column: 9,
											Line:   50,
										},
									},
								},
								Name: "type",
							},
							Separator: nil,
							Value: &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 21,
											Line:   50,
										},
										File:   "sample.flux",
										Source: "\"live\"",
										Start: ast.Position{
											Column: 15,
											Line:   50,
										},
									},
								},
								Value: "live",
							},
						}},
						Rbrace: nil,
						With:   nil,
					},
				}},
				Lbrack: nil,
				Rbrack: nil,
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   58,
					},
					File:   "sample.flux",
					Source: "_setInfo = (set) => {\n    _setDict = dict.get(dict: sets, key: set, default: {url: \"\", desc: \"\", size: \"\", type: \"\"})\n\n    return {name: set, description: _setDict.desc, url: _setDict.url, size: _setDict.size, type: _setDict.type}\n}",
					Start: ast.Position{
						Column: 1,
						Line:   54,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 9,
							Line:   54,
						},
						File:   "sample.flux",
						Source: "_setInfo",
						Start: ast.Position{
							Column: 1,
							Line:   54,
						},
					},
				},
				Name: "_setInfo",
			},
			Init: &ast.FunctionExpression{
				Arrow: nil,
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   58,
						},
						File:   "sample.flux",
						Source: "(set) => {\n    _setDict = dict.get(dict: sets, key: set, default: {url: \"\", desc: \"\", size: \"\", type: \"\"})\n\n    return {name: set, description: _setDict.desc, url: _setDict.url, size: _setDict.size, type: _setDict.type}\n}",
						Start: ast.Position{
							Column: 12,
							Line:   54,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   58,
							},
							File:   "sample.flux",
							Source: "{\n    _setDict = dict.get(dict: sets, key: set, default: {url: \"\", desc: \"\", size: \"\", type: \"\"})\n\n    return {name: set, description: _setDict.desc, url: _setDict.url, size: _setDict.size, type: _setDict.type}\n}",
							Start: ast.Position{
								Column: 21,
								Line:   54,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 96,
									Line:   55,
								},
								File:   "sample.flux",
								Source: "_setDict = dict.get(dict: sets, key: set, default: {url: \"\", desc: \"\", size: \"\", type: \"\"})",
								Start: ast.Position{
									Column: 5,
									Line:   55,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 13,
										Line:   55,
									},
									File:   "sample.flux",
									Source: "_setDict",
									Start: ast.Position{
										Column: 5,
										Line:   55,
									},
								},
							},
							Name: "_setDict",
						},
						Init: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 95,
											Line:   55,
										},
										File:   "sample.flux",
										Source: "dict: sets, key: set, default: {url: \"\", desc: \"\", size: \"\", type: \"\"}",
										Start: ast.Position{
											Column: 25,
											Line:   55,
										},
									},
								},
								Lbrace: nil,
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 35,
												Line:   55,
											},
											File:   "sample.flux",
											Source: "dict: sets",
											Start: ast.Position{
												Column: 25,
												Line:   55,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 29,
													Line:   55,
												},
												File:   "sample.flux",
												Source: "dict",
												Start: ast.Position{
													Column: 25,
													Line:   55,
												},
											},
										},
										Name: "dict",
									},
									Separator: nil,
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 35,
													Line:   55,
												},
												File:   "sample.flux",
												Source: "sets",
												Start: ast.Position{
													Column: 31,
													Line:   55,
												},
											},
										},
										Name: "sets",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 45,
												Line:   55,
											},
											File:   "sample.flux",
											Source: "key: set",
											Start: ast.Position{
												Column: 37,
												Line:   55,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   55,
												},
												File:   "sample.flux",
												Source: "key",
												Start: ast.Position{
													Column: 37,
													Line:   55,
												},
											},
										},
										Name: "key",
									},
									Separator: nil,
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 45,
													Line:   55,
												},
												File:   "sample.flux",
												Source: "set",
												Start: ast.Position{
													Column: 42,
													Line:   55,
												},
											},
										},
										Name: "set",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 95,
												Line:   55,
											},
											File:   "sample.flux",
											Source: "default: {url: \"\", desc: \"\", size: \"\", type: \"\"}",
											Start: ast.Position{
												Column: 47,
												Line:   55,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 54,
													Line:   55,
												},
												File:   "sample.flux",
												Source: "default",
												Start: ast.Position{
													Column: 47,
													Line:   55,
												},
											},
										},
										Name: "default",
									},
									Separator: nil,
									Value: &ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 95,
													Line:   55,
												},
												File:   "sample.flux",
												Source: "{url: \"\", desc: \"\", size: \"\", type: \"\"}",
												Start: ast.Position{
													Column: 56,
													Line:   55,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 64,
														Line:   55,
													},
													File:   "sample.flux",
													Source: "url: \"\"",
													Start: ast.Position{
														Column: 57,
														Line:   55,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 60,
															Line:   55,
														},
														File:   "sample.flux",
														Source: "url",
														Start: ast.Position{
															Column: 57,
															Line:   55,
														},
													},
												},
												Name: "url",
											},
											Separator: nil,
											Value: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 64,
															Line:   55,
														},
														File:   "sample.flux",
														Source: "\"\"",
														Start: ast.Position{
															Column: 62,
															Line:   55,
														},
													},
												},
												Value: "",
											},
										}, &ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 74,
														Line:   55,
													},
													File:   "sample.flux",
													Source: "desc: \"\"",
													Start: ast.Position{
														Column: 66,
														Line:   55,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 70,
															Line:   55,
														},
														File:   "sample.flux",
														Source: "desc",
														Start: ast.Position{
															Column: 66,
															Line:   55,
														},
													},
												},
												Name: "desc",
											},
											Separator: nil,
											Value: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 74,
															Line:   55,
														},
														File:   "sample.flux",
														Source: "\"\"",
														Start: ast.Position{
															Column: 72,
															Line:   55,
														},
													},
												},
												Value: "",
											},
										}, &ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 84,
														Line:   55,
													},
													File:   "sample.flux",
													Source: "size: \"\"",
													Start: ast.Position{
														Column: 76,
														Line:   55,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 80,
															Line:   55,
														},
														File:   "sample.flux",
														Source: "size",
														Start: ast.Position{
															Column: 76,
															Line:   55,
														},
													},
												},
												Name: "size",
											},
											Separator: nil,
											Value: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 84,
															Line:   55,
														},
														File:   "sample.flux",
														Source: "\"\"",
														Start: ast.Position{
															Column: 82,
															Line:   55,
														},
													},
												},
												Value: "",
											},
										}, &ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 94,
														Line:   55,
													},
													File:   "sample.flux",
													Source: "type: \"\"",
													Start: ast.Position{
														Column: 86,
														Line:   55,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 90,
															Line:   55,
														},
														File:   "sample.flux",
														Source: "type",
														Start: ast.Position{
															Column: 86,
															Line:   55,
														},
													},
												},
												Name: "type",
											},
											Separator: nil,
											Value: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 94,
															Line:   55,
														},
														File:   "sample.flux",
														Source: "\"\"",
														Start: ast.Position{
															Column: 92,
															Line:   55,
														},
													},
												},
												Value: "",
											},
										}},
										Rbrace: nil,
										With:   nil,
									},
								}},
								Rbrace: nil,
								With:   nil,
							}},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 96,
										Line:   55,
									},
									File:   "sample.flux",
									Source: "dict.get(dict: sets, key: set, default: {url: \"\", desc: \"\", size: \"\", type: \"\"})",
									Start: ast.Position{
										Column: 16,
										Line:   55,
									},
								},
							},
							Callee: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 24,
											Line:   55,
										},
										File:   "sample.flux",
										Source: "dict.get",
										Start: ast.Position{
											Column: 16,
											Line:   55,
										},
									},
								},
								Lbrack: nil,
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   55,
											},
											File:   "sample.flux",
											Source: "dict",
											Start: ast.Position{
												Column: 16,
												Line:   55,
											},
										},
									},
									Name: "dict",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 24,
												Line:   55,
											},
											File:   "sample.flux",
											Source: "get",
											Start: ast.Position{
												Column: 21,
												Line:   55,
											},
										},
									},
									Name: "get",
								},
								Rbrack: nil,
							},
							Lparen: nil,
							Rparen: nil,
						},
					}, &ast.ReturnStatement{
						Argument: &ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 112,
										Line:   57,
									},
									File:   "sample.flux",
									Source: "{name: set, description: _setDict.desc, url: _setDict.url, size: _setDict.size, type: _setDict.type}",
									Start: ast.Position{
										Column: 12,
										Line:   57,
									},
								},
							},
							Lbrace: nil,
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 22,
											Line:   57,
										},
										File:   "sample.flux",
										Source: "name: set",
										Start: ast.Position{
											Column: 13,
											Line:   57,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   57,
											},
											File:   "sample.flux",
											Source: "name",
											Start: ast.Position{
												Column: 13,
												Line:   57,
											},
										},
									},
									Name: "name",
								},
								Separator: nil,
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 22,
												Line:   57,
											},
											File:   "sample.flux",
											Source: "set",
											Start: ast.Position{
												Column: 19,
												Line:   57,
											},
										},
									},
									Name: "set",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 50,
											Line:   57,
										},
										File:   "sample.flux",
										Source: "description: _setDict.desc",
										Start: ast.Position{
											Column: 24,
											Line:   57,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 35,
												Line:   57,
											},
											File:   "sample.flux",
											Source: "description",
											Start: ast.Position{
												Column: 24,
												Line:   57,
											},
										},
									},
									Name: "description",
								},
								Separator: nil,
								Value: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 50,
												Line:   57,
											},
											File:   "sample.flux",
											Source: "_setDict.desc",
											Start: ast.Position{
												Column: 37,
												Line:   57,
											},
										},
									},
									Lbrack: nil,
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 45,
													Line:   57,
												},
												File:   "sample.flux",
												Source: "_setDict",
												Start: ast.Position{
													Column: 37,
													Line:   57,
												},
											},
										},
										Name: "_setDict",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 50,
													Line:   57,
												},
												File:   "sample.flux",
												Source: "desc",
												Start: ast.Position{
													Column: 46,
													Line:   57,
												},
											},
										},
										Name: "desc",
									},
									Rbrack: nil,
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 69,
											Line:   57,
										},
										File:   "sample.flux",
										Source: "url: _setDict.url",
										Start: ast.Position{
											Column: 52,
											Line:   57,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 55,
												Line:   57,
											},
											File:   "sample.flux",
											Source: "url",
											Start: ast.Position{
												Column: 52,
												Line:   57,
											},
										},
									},
									Name: "url",
								},
								Separator: nil,
								Value: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 69,
												Line:   57,
											},
											File:   "sample.flux",
											Source: "_setDict.url",
											Start: ast.Position{
												Column: 57,
												Line:   57,
											},
										},
									},
									Lbrack: nil,
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 65,
													Line:   57,
												},
												File:   "sample.flux",
												Source: "_setDict",
												Start: ast.Position{
													Column: 57,
													Line:   57,
												},
											},
										},
										Name: "_setDict",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 69,
													Line:   57,
												},
												File:   "sample.flux",
												Source: "url",
												Start: ast.Position{
													Column: 66,
													Line:   57,
												},
											},
										},
										Name: "url",
									},
									Rbrack: nil,
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 90,
											Line:   57,
										},
										File:   "sample.flux",
										Source: "size: _setDict.size",
										Start: ast.Position{
											Column: 71,
											Line:   57,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 75,
												Line:   57,
											},
											File:   "sample.flux",
											Source: "size",
											Start: ast.Position{
												Column: 71,
												Line:   57,
											},
										},
									},
									Name: "size",
								},
								Separator: nil,
								Value: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 90,
												Line:   57,
											},
											File:   "sample.flux",
											Source: "_setDict.size",
											Start: ast.Position{
												Column: 77,
												Line:   57,
											},
										},
									},
									Lbrack: nil,
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 85,
													Line:   57,
												},
												File:   "sample.flux",
												Source: "_setDict",
												Start: ast.Position{
													Column: 77,
													Line:   57,
												},
											},
										},
										Name: "_setDict",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 90,
													Line:   57,
												},
												File:   "sample.flux",
												Source: "size",
												Start: ast.Position{
													Column: 86,
													Line:   57,
												},
											},
										},
										Name: "size",
									},
									Rbrack: nil,
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 111,
											Line:   57,
										},
										File:   "sample.flux",
										Source: "type: _setDict.type",
										Start: ast.Position{
											Column: 92,
											Line:   57,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 96,
												Line:   57,
											},
											File:   "sample.flux",
											Source: "type",
											Start: ast.Position{
												Column: 92,
												Line:   57,
											},
										},
									},
									Name: "type",
								},
								Separator: nil,
								Value: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 111,
												Line:   57,
											},
											File:   "sample.flux",
											Source: "_setDict.type",
											Start: ast.Position{
												Column: 98,
												Line:   57,
											},
										},
									},
									Lbrack: nil,
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 106,
													Line:   57,
												},
												File:   "sample.flux",
												Source: "_setDict",
												Start: ast.Position{
													Column: 98,
													Line:   57,
												},
											},
										},
										Name: "_setDict",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 111,
													Line:   57,
												},
												File:   "sample.flux",
												Source: "type",
												Start: ast.Position{
													Column: 107,
													Line:   57,
												},
											},
										},
										Name: "type",
									},
									Rbrack: nil,
								},
							}},
							Rbrace: nil,
							With:   nil,
						},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 112,
									Line:   57,
								},
								File:   "sample.flux",
								Source: "return {name: set, description: _setDict.desc, url: _setDict.url, size: _setDict.size, type: _setDict.type}",
								Start: ast.Position{
									Column: 5,
									Line:   57,
								},
							},
						},
					}},
					Lbrace: nil,
					Rbrace: nil,
				},
				Lparen: nil,
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 16,
								Line:   54,
							},
							File:   "sample.flux",
							Source: "set",
							Start: ast.Position{
								Column: 13,
								Line:   54,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 16,
									Line:   54,
								},
								File:   "sample.flux",
								Source: "set",
								Start: ast.Position{
									Column: 13,
									Line:   54,
								},
							},
						},
						Name: "set",
					},
					Separator: nil,
					Value:     nil,
				}},
				Rparan: nil,
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   90,
					},
					File:   "sample.flux",
					Source: "data = (set) => {\n    setInfo = _setInfo(set: set)\n\n    url = if setInfo.url == \"\" then\n        die(msg: \"Invalid sample data set. Use sample.list to view available datasets.\")\n    else\n        setInfo.url\n\n    return csv.from(url: url)\n}",
					Start: ast.Position{
						Column: 1,
						Line:   81,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// data downloads a specified InfluxDB sample dataset.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Parameters\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// - `set` is the sample data set to download and output. Valid datasets:\n"}, ast.Comment{Text: "//    - **airSensor**: Simulated temperature, humidity, and CO data from an office building.\n"}, ast.Comment{Text: "//    - **birdMigration**: 2019 African bird migration data from [Movebank: Animal Tracking](https://www.kaggle.com/pulkit8595/movebank-animal-tracking).\n"}, ast.Comment{Text: "//    - **bitcoin**: Bitcoin price data from the last 30 days _([Powered by CoinDesk](https://www.coindesk.com/price/bitcoin))_.\n"}, ast.Comment{Text: "//    - **noaa**: Latest observations from the [NOAA National Data Buoy Center (NDBC)](https://www.ndbc.noaa.gov/).\n"}, ast.Comment{Text: "//    - **machineProduction**: States and metrics reported from four automated grinding wheel stations on a production line.\n"}, ast.Comment{Text: "//    - **noaaWater**: Water level observations from two stations reported by the NOAA Center for Operational Oceanographic Products and Services between 2019-08-17 and 2019-09-17.\n"}, ast.Comment{Text: "//    - **usgs**: USGS earthquake data from the last week.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Load InfluxDB sample data\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"influxdata/influxdb/sample\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// sample.data(set: \"airSensor\")\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "//\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 5,
							Line:   81,
						},
						File:   "sample.flux",
						Source: "data",
						Start: ast.Position{
							Column: 1,
							Line:   81,
						},
					},
				},
				Name: "data",
			},
			Init: &ast.FunctionExpression{
				Arrow: nil,
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   90,
						},
						File:   "sample.flux",
						Source: "(set) => {\n    setInfo = _setInfo(set: set)\n\n    url = if setInfo.url == \"\" then\n        die(msg: \"Invalid sample data set. Use sample.list to view available datasets.\")\n    else\n        setInfo.url\n\n    return csv.from(url: url)\n}",
						Start: ast.Position{
							Column: 8,
							Line:   81,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   90,
							},
							File:   "sample.flux",
							Source: "{\n    setInfo = _setInfo(set: set)\n\n    url = if setInfo.url == \"\" then\n        die(msg: \"Invalid sample data set. Use sample.list to view available datasets.\")\n    else\n        setInfo.url\n\n    return csv.from(url: url)\n}",
							Start: ast.Position{
								Column: 17,
								Line:   81,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 33,
									Line:   82,
								},
								File:   "sample.flux",
								Source: "setInfo = _setInfo(set: set)",
								Start: ast.Position{
									Column: 5,
									Line:   82,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   82,
									},
									File:   "sample.flux",
									Source: "setInfo",
									Start: ast.Position{
										Column: 5,
										Line:   82,
									},
								},
							},
							Name: "setInfo",
						},
						Init: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 32,
											Line:   82,
										},
										File:   "sample.flux",
										Source: "set: set",
										Start: ast.Position{
											Column: 24,
											Line:   82,
										},
									},
								},
								Lbrace: nil,
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 32,
												Line:   82,
											},
											File:   "sample.flux",
											Source: "set: set",
											Start: ast.Position{
												Column: 24,
												Line:   82,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 27,
													Line:   82,
												},
												File:   "sample.flux",
												Source: "set",
												Start: ast.Position{
													Column: 24,
													Line:   82,
												},
											},
										},
										Name: "set",
									},
									Separator: nil,
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 32,
													Line:   82,
												},
												File:   "sample.flux",
												Source: "set",
												Start: ast.Position{
													Column: 29,
													Line:   82,
												},
											},
										},
										Name: "set",
									},
								}},
								Rbrace: nil,
								With:   nil,
							}},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 33,
										Line:   82,
									},
									File:   "sample.flux",
									Source: "_setInfo(set: set)",
									Start: ast.Position{
										Column: 15,
										Line:   82,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 23,
											Line:   82,
										},
										File:   "sample.flux",
										Source: "_setInfo",
										Start: ast.Position{
											Column: 15,
											Line:   82,
										},
									},
								},
								Name: "_setInfo",
							},
							Lparen: nil,
							Rparen: nil,
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 20,
									Line:   87,
								},
								File:   "sample.flux",
								Source: "url = if setInfo.url == \"\" then\n        die(msg: \"Invalid sample data set. Use sample.list to view available datasets.\")\n    else\n        setInfo.url",
								Start: ast.Position{
									Column: 5,
									Line:   84,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   84,
									},
									File:   "sample.flux",
									Source: "url",
									Start: ast.Position{
										Column: 5,
										Line:   84,
									},
								},
							},
							Name: "url",
						},
						Init: &ast.ConditionalExpression{
							Alternate: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   87,
										},
										File:   "sample.flux",
										Source: "setInfo.url",
										Start: ast.Position{
											Column: 9,
											Line:   87,
										},
									},
								},
								Lbrack: nil,
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 16,
												Line:   87,
											},
											File:   "sample.flux",
											Source: "setInfo",
											Start: ast.Position{
												Column: 9,
												Line:   87,
											},
										},
									},
									Name: "setInfo",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   87,
											},
											File:   "sample.flux",
											Source: "url",
											Start: ast.Position{
												Column: 17,
												Line:   87,
											},
										},
									},
									Name: "url",
								},
								Rbrack: nil,
							},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 20,
										Line:   87,
									},
									File:   "sample.flux",
									Source: "if setInfo.url == \"\" then\n        die(msg: \"Invalid sample data set. Use sample.list to view available datasets.\")\n    else\n        setInfo.url",
									Start: ast.Position{
										Column: 11,
										Line:   84,
									},
								},
							},
							Consequent: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 88,
												Line:   85,
											},
											File:   "sample.flux",
											Source: "msg: \"Invalid sample data set. Use sample.list to view available datasets.\"",
											Start: ast.Position{
												Column: 13,
												Line:   85,
											},
										},
									},
									Lbrace: nil,
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 88,
													Line:   85,
												},
												File:   "sample.flux",
												Source: "msg: \"Invalid sample data set. Use sample.list to view available datasets.\"",
												Start: ast.Position{
													Column: 13,
													Line:   85,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   85,
													},
													File:   "sample.flux",
													Source: "msg",
													Start: ast.Position{
														Column: 13,
														Line:   85,
													},
												},
											},
											Name: "msg",
										},
										Separator: nil,
										Value: &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 88,
														Line:   85,
													},
													File:   "sample.flux",
													Source: "\"Invalid sample data set. Use sample.list to view available datasets.\"",
													Start: ast.Position{
														Column: 18,
														Line:   85,
													},
												},
											},
											Value: "Invalid sample data set. Use sample.list to view available datasets.",
										},
									}},
									Rbrace: nil,
									With:   nil,
								}},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 89,
											Line:   85,
										},
										File:   "sample.flux",
										Source: "die(msg: \"Invalid sample data set. Use sample.list to view available datasets.\")",
										Start: ast.Position{
											Column: 9,
											Line:   85,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 12,
												Line:   85,
											},
											File:   "sample.flux",
											Source: "die",
											Start: ast.Position{
												Column: 9,
												Line:   85,
											},
										},
									},
									Name: "die",
								},
								Lparen: nil,
								Rparen: nil,
							},
							Test: &ast.BinaryExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 31,
											Line:   84,
										},
										File:   "sample.flux",
										Source: "setInfo.url == \"\"",
										Start: ast.Position{
											Column: 14,
											Line:   84,
										},
									},
								},
								Left: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 25,
												Line:   84,
											},
											File:   "sample.flux",
											Source: "setInfo.url",
											Start: ast.Position{
												Column: 14,
												Line:   84,
											},
										},
									},
									Lbrack: nil,
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 21,
													Line:   84,
												},
												File:   "sample.flux",
												Source: "setInfo",
												Start: ast.Position{
													Column: 14,
													Line:   84,
												},
											},
										},
										Name: "setInfo",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 25,
													Line:   84,
												},
												File:   "sample.flux",
												Source: "url",
												Start: ast.Position{
													Column: 22,
													Line:   84,
												},
											},
										},
										Name: "url",
									},
									Rbrack: nil,
								},
								Operator: 17,
								Right: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   84,
											},
											File:   "sample.flux",
											Source: "\"\"",
											Start: ast.Position{
												Column: 29,
												Line:   84,
											},
										},
									},
									Value: "",
								},
							},
							Tk_else: nil,
							Tk_if:   nil,
							Tk_then: nil,
						},
					}, &ast.ReturnStatement{
						Argument: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 29,
											Line:   89,
										},
										File:   "sample.flux",
										Source: "url: url",
										Start: ast.Position{
											Column: 21,
											Line:   89,
										},
									},
								},
								Lbrace: nil,
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 29,
												Line:   89,
											},
											File:   "sample.flux",
											Source: "url: url",
											Start: ast.Position{
												Column: 21,
												Line:   89,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   89,
												},
												File:   "sample.flux",
												Source: "url",
												Start: ast.Position{
													Column: 21,
													Line:   89,
												},
											},
										},
										Name: "url",
									},
									Separator: nil,
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 29,
													Line:   89,
												},
												File:   "sample.flux",
												Source: "url",
												Start: ast.Position{
													Column: 26,
													Line:   89,
												},
											},
										},
										Name: "url",
									},
								}},
								Rbrace: nil,
								With:   nil,
							}},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   89,
									},
									File:   "sample.flux",
									Source: "csv.from(url: url)",
									Start: ast.Position{
										Column: 12,
										Line:   89,
									},
								},
							},
							Callee: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   89,
										},
										File:   "sample.flux",
										Source: "csv.from",
										Start: ast.Position{
											Column: 12,
											Line:   89,
										},
									},
								},
								Lbrack: nil,
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 15,
												Line:   89,
											},
											File:   "sample.flux",
											Source: "csv",
											Start: ast.Position{
												Column: 12,
												Line:   89,
											},
										},
									},
									Name: "csv",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   89,
											},
											File:   "sample.flux",
											Source: "from",
											Start: ast.Position{
												Column: 16,
												Line:   89,
											},
										},
									},
									Name: "from",
								},
								Rbrack: nil,
							},
							Lparen: nil,
							Rparen: nil,
						},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   89,
								},
								File:   "sample.flux",
								Source: "return csv.from(url: url)",
								Start: ast.Position{
									Column: 5,
									Line:   89,
								},
							},
						},
					}},
					Lbrace: nil,
					Rbrace: nil,
				},
				Lparen: nil,
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   81,
							},
							File:   "sample.flux",
							Source: "set",
							Start: ast.Position{
								Column: 9,
								Line:   81,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 12,
									Line:   81,
								},
								File:   "sample.flux",
								Source: "set",
								Start: ast.Position{
									Column: 9,
									Line:   81,
								},
							},
						},
						Name: "set",
					},
					Separator: nil,
					Value:     nil,
				}},
				Rparan: nil,
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   112,
					},
					File:   "sample.flux",
					Source: "list = () => array.from(\n    rows: [\n        _setInfo(set: \"airSensor\"),\n        _setInfo(set: \"birdMigration\"),\n        _setInfo(set: \"bitcoin\"),\n        _setInfo(set: \"machineProduction\"),\n        _setInfo(set: \"noaa\"),\n        _setInfo(set: \"noaaWater\"),\n        _setInfo(set: \"usgs\"),\n    ],\n)",
					Start: ast.Position{
						Column: 1,
						Line:   102,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// list outputs information about available InfluxDB sample datasets.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## List available InfluxDB sample datasets\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"influxdata/influxdb/sample\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// sample.list()\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "//\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 5,
							Line:   102,
						},
						File:   "sample.flux",
						Source: "list",
						Start: ast.Position{
							Column: 1,
							Line:   102,
						},
					},
				},
				Name: "list",
			},
			Init: &ast.FunctionExpression{
				Arrow: nil,
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   112,
						},
						File:   "sample.flux",
						Source: "() => array.from(\n    rows: [\n        _setInfo(set: \"airSensor\"),\n        _setInfo(set: \"birdMigration\"),\n        _setInfo(set: \"bitcoin\"),\n        _setInfo(set: \"machineProduction\"),\n        _setInfo(set: \"noaa\"),\n        _setInfo(set: \"noaaWater\"),\n        _setInfo(set: \"usgs\"),\n    ],\n)",
						Start: ast.Position{
							Column: 8,
							Line:   102,
						},
					},
				},
				Body: &ast.CallExpression{
					Arguments: []ast.Expression{&ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 6,
									Line:   111,
								},
								File:   "sample.flux",
								Source: "rows: [\n        _setInfo(set: \"airSensor\"),\n        _setInfo(set: \"birdMigration\"),\n        _setInfo(set: \"bitcoin\"),\n        _setInfo(set: \"machineProduction\"),\n        _setInfo(set: \"noaa\"),\n        _setInfo(set: \"noaaWater\"),\n        _setInfo(set: \"usgs\"),\n    ]",
								Start: ast.Position{
									Column: 5,
									Line:   103,
								},
							},
						},
						Lbrace: nil,
						Properties: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 6,
										Line:   111,
									},
									File:   "sample.flux",
									Source: "rows: [\n        _setInfo(set: \"airSensor\"),\n        _setInfo(set: \"birdMigration\"),\n        _setInfo(set: \"bitcoin\"),\n        _setInfo(set: \"machineProduction\"),\n        _setInfo(set: \"noaa\"),\n        _setInfo(set: \"noaaWater\"),\n        _setInfo(set: \"usgs\"),\n    ]",
									Start: ast.Position{
										Column: 5,
										Line:   103,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 9,
											Line:   103,
										},
										File:   "sample.flux",
										Source: "rows",
										Start: ast.Position{
											Column: 5,
											Line:   103,
										},
									},
								},
								Name: "rows",
							},
							Separator: nil,
							Value: &ast.ArrayExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 6,
											Line:   111,
										},
										File:   "sample.flux",
										Source: "[\n        _setInfo(set: \"airSensor\"),\n        _setInfo(set: \"birdMigration\"),\n        _setInfo(set: \"bitcoin\"),\n        _setInfo(set: \"machineProduction\"),\n        _setInfo(set: \"noaa\"),\n        _setInfo(set: \"noaaWater\"),\n        _setInfo(set: \"usgs\"),\n    ]",
										Start: ast.Position{
											Column: 11,
											Line:   103,
										},
									},
								},
								Elements: []ast.Expression{&ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 34,
													Line:   104,
												},
												File:   "sample.flux",
												Source: "set: \"airSensor\"",
												Start: ast.Position{
													Column: 18,
													Line:   104,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 34,
														Line:   104,
													},
													File:   "sample.flux",
													Source: "set: \"airSensor\"",
													Start: ast.Position{
														Column: 18,
														Line:   104,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 21,
															Line:   104,
														},
														File:   "sample.flux",
														Source: "set",
														Start: ast.Position{
															Column: 18,
															Line:   104,
														},
													},
												},
												Name: "set",
											},
											Separator: nil,
											Value: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 34,
															Line:   104,
														},
														File:   "sample.flux",
														Source: "\"airSensor\"",
														Start: ast.Position{
															Column: 23,
															Line:   104,
														},
													},
												},
												Value: "airSensor",
											},
										}},
										Rbrace: nil,
										With:   nil,
									}},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 35,
												Line:   104,
											},
											File:   "sample.flux",
											Source: "_setInfo(set: \"airSensor\")",
											Start: ast.Position{
												Column: 9,
												Line:   104,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   104,
												},
												File:   "sample.flux",
												Source: "_setInfo",
												Start: ast.Position{
													Column: 9,
													Line:   104,
												},
											},
										},
										Name: "_setInfo",
									},
									Lparen: nil,
									Rparen: nil,
								}, &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 38,
													Line:   105,
												},
												File:   "sample.flux",
												Source: "set: \"birdMigration\"",
												Start: ast.Position{
													Column: 18,
													Line:   105,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 38,
														Line:   105,
													},
													File:   "sample.flux",
													Source: "set: \"birdMigration\"",
													Start: ast.Position{
														Column: 18,
														Line:   105,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 21,
															Line:   105,
														},
														File:   "sample.flux",
														Source: "set",
														Start: ast.Position{
															Column: 18,
															Line:   105,
														},
													},
												},
												Name: "set",
											},
											Separator: nil,
											Value: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 38,
															Line:   105,
														},
														File:   "sample.flux",
														Source: "\"birdMigration\"",
														Start: ast.Position{
															Column: 23,
															Line:   105,
														},
													},
												},
												Value: "birdMigration",
											},
										}},
										Rbrace: nil,
										With:   nil,
									}},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 39,
												Line:   105,
											},
											File:   "sample.flux",
											Source: "_setInfo(set: \"birdMigration\")",
											Start: ast.Position{
												Column: 9,
												Line:   105,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   105,
												},
												File:   "sample.flux",
												Source: "_setInfo",
												Start: ast.Position{
													Column: 9,
													Line:   105,
												},
											},
										},
										Name: "_setInfo",
									},
									Lparen: nil,
									Rparen: nil,
								}, &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 32,
													Line:   106,
												},
												File:   "sample.flux",
												Source: "set: \"bitcoin\"",
												Start: ast.Position{
													Column: 18,
													Line:   106,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 32,
														Line:   106,
													},
													File:   "sample.flux",
													Source: "set: \"bitcoin\"",
													Start: ast.Position{
														Column: 18,
														Line:   106,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 21,
															Line:   106,
														},
														File:   "sample.flux",
														Source: "set",
														Start: ast.Position{
															Column: 18,
															Line:   106,
														},
													},
												},
												Name: "set",
											},
											Separator: nil,
											Value: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 32,
															Line:   106,
														},
														File:   "sample.flux",
														Source: "\"bitcoin\"",
														Start: ast.Position{
															Column: 23,
															Line:   106,
														},
													},
												},
												Value: "bitcoin",
											},
										}},
										Rbrace: nil,
										With:   nil,
									}},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 33,
												Line:   106,
											},
											File:   "sample.flux",
											Source: "_setInfo(set: \"bitcoin\")",
											Start: ast.Position{
												Column: 9,
												Line:   106,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   106,
												},
												File:   "sample.flux",
												Source: "_setInfo",
												Start: ast.Position{
													Column: 9,
													Line:   106,
												},
											},
										},
										Name: "_setInfo",
									},
									Lparen: nil,
									Rparen: nil,
								}, &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 42,
													Line:   107,
												},
												File:   "sample.flux",
												Source: "set: \"machineProduction\"",
												Start: ast.Position{
													Column: 18,
													Line:   107,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 42,
														Line:   107,
													},
													File:   "sample.flux",
													Source: "set: \"machineProduction\"",
													Start: ast.Position{
														Column: 18,
														Line:   107,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 21,
															Line:   107,
														},
														File:   "sample.flux",
														Source: "set",
														Start: ast.Position{
															Column: 18,
															Line:   107,
														},
													},
												},
												Name: "set",
											},
											Separator: nil,
											Value: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 42,
															Line:   107,
														},
														File:   "sample.flux",
														Source: "\"machineProduction\"",
														Start: ast.Position{
															Column: 23,
															Line:   107,
														},
													},
												},
												Value: "machineProduction",
											},
										}},
										Rbrace: nil,
										With:   nil,
									}},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 43,
												Line:   107,
											},
											File:   "sample.flux",
											Source: "_setInfo(set: \"machineProduction\")",
											Start: ast.Position{
												Column: 9,
												Line:   107,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   107,
												},
												File:   "sample.flux",
												Source: "_setInfo",
												Start: ast.Position{
													Column: 9,
													Line:   107,
												},
											},
										},
										Name: "_setInfo",
									},
									Lparen: nil,
									Rparen: nil,
								}, &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 29,
													Line:   108,
												},
												File:   "sample.flux",
												Source: "set: \"noaa\"",
												Start: ast.Position{
													Column: 18,
													Line:   108,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 29,
														Line:   108,
													},
													File:   "sample.flux",
													Source: "set: \"noaa\"",
													Start: ast.Position{
														Column: 18,
														Line:   108,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 21,
															Line:   108,
														},
														File:   "sample.flux",
														Source: "set",
														Start: ast.Position{
															Column: 18,
															Line:   108,
														},
													},
												},
												Name: "set",
											},
											Separator: nil,
											Value: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 29,
															Line:   108,
														},
														File:   "sample.flux",
														Source: "\"noaa\"",
														Start: ast.Position{
															Column: 23,
															Line:   108,
														},
													},
												},
												Value: "noaa",
											},
										}},
										Rbrace: nil,
										With:   nil,
									}},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   108,
											},
											File:   "sample.flux",
											Source: "_setInfo(set: \"noaa\")",
											Start: ast.Position{
												Column: 9,
												Line:   108,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   108,
												},
												File:   "sample.flux",
												Source: "_setInfo",
												Start: ast.Position{
													Column: 9,
													Line:   108,
												},
											},
										},
										Name: "_setInfo",
									},
									Lparen: nil,
									Rparen: nil,
								}, &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 34,
													Line:   109,
												},
												File:   "sample.flux",
												Source: "set: \"noaaWater\"",
												Start: ast.Position{
													Column: 18,
													Line:   109,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 34,
														Line:   109,
													},
													File:   "sample.flux",
													Source: "set: \"noaaWater\"",
													Start: ast.Position{
														Column: 18,
														Line:   109,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 21,
															Line:   109,
														},
														File:   "sample.flux",
														Source: "set",
														Start: ast.Position{
															Column: 18,
															Line:   109,
														},
													},
												},
												Name: "set",
											},
											Separator: nil,
											Value: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 34,
															Line:   109,
														},
														File:   "sample.flux",
														Source: "\"noaaWater\"",
														Start: ast.Position{
															Column: 23,
															Line:   109,
														},
													},
												},
												Value: "noaaWater",
											},
										}},
										Rbrace: nil,
										With:   nil,
									}},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 35,
												Line:   109,
											},
											File:   "sample.flux",
											Source: "_setInfo(set: \"noaaWater\")",
											Start: ast.Position{
												Column: 9,
												Line:   109,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   109,
												},
												File:   "sample.flux",
												Source: "_setInfo",
												Start: ast.Position{
													Column: 9,
													Line:   109,
												},
											},
										},
										Name: "_setInfo",
									},
									Lparen: nil,
									Rparen: nil,
								}, &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 29,
													Line:   110,
												},
												File:   "sample.flux",
												Source: "set: \"usgs\"",
												Start: ast.Position{
													Column: 18,
													Line:   110,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 29,
														Line:   110,
													},
													File:   "sample.flux",
													Source: "set: \"usgs\"",
													Start: ast.Position{
														Column: 18,
														Line:   110,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 21,
															Line:   110,
														},
														File:   "sample.flux",
														Source: "set",
														Start: ast.Position{
															Column: 18,
															Line:   110,
														},
													},
												},
												Name: "set",
											},
											Separator: nil,
											Value: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 29,
															Line:   110,
														},
														File:   "sample.flux",
														Source: "\"usgs\"",
														Start: ast.Position{
															Column: 23,
															Line:   110,
														},
													},
												},
												Value: "usgs",
											},
										}},
										Rbrace: nil,
										With:   nil,
									}},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   110,
											},
											File:   "sample.flux",
											Source: "_setInfo(set: \"usgs\")",
											Start: ast.Position{
												Column: 9,
												Line:   110,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   110,
												},
												File:   "sample.flux",
												Source: "_setInfo",
												Start: ast.Position{
													Column: 9,
													Line:   110,
												},
											},
										},
										Name: "_setInfo",
									},
									Lparen: nil,
									Rparen: nil,
								}},
								Lbrack: nil,
								Rbrack: nil,
							},
						}},
						Rbrace: nil,
						With:   nil,
					}},
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   112,
							},
							File:   "sample.flux",
							Source: "array.from(\n    rows: [\n        _setInfo(set: \"airSensor\"),\n        _setInfo(set: \"birdMigration\"),\n        _setInfo(set: \"bitcoin\"),\n        _setInfo(set: \"machineProduction\"),\n        _setInfo(set: \"noaa\"),\n        _setInfo(set: \"noaaWater\"),\n        _setInfo(set: \"usgs\"),\n    ],\n)",
							Start: ast.Position{
								Column: 14,
								Line:   102,
							},
						},
					},
					Callee: &ast.MemberExpression{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 24,
									Line:   102,
								},
								File:   "sample.flux",
								Source: "array.from",
								Start: ast.Position{
									Column: 14,
									Line:   102,
								},
							},
						},
						Lbrack: nil,
						Object: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 19,
										Line:   102,
									},
									File:   "sample.flux",
									Source: "array",
									Start: ast.Position{
										Column: 14,
										Line:   102,
									},
								},
							},
							Name: "array",
						},
						Property: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   102,
									},
									File:   "sample.flux",
									Source: "from",
									Start: ast.Position{
										Column: 20,
										Line:   102,
									},
								},
							},
							Name: "from",
						},
						Rbrack: nil,
					},
					Lparen: nil,
					Rparen: nil,
				},
				Lparen: nil,
				Params: []*ast.Property{},
				Rparan: nil,
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   134,
					},
					File:   "sample.flux",
					Source: "alignToNow = (tables=<-) => {\n    _lastTime = (tables |> keep(columns: [\"_time\"]) |> last(column: \"_time\") |> findRecord(fn: (key) => true, idx: 0))._time\n    _offset = int(v: now()) - int(v: _lastTime)\n    _offsetDuration = duration(v: _offset)\n\n    return tables |> timeShift(duration: _offsetDuration)\n}",
					Start: ast.Position{
						Column: 1,
						Line:   128,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// alignToNow shifts time values in input data to align the chronological last point to _now_.\n"}, ast.Comment{Text: "// When writing static historical sample datasets to **InfluxDB Cloud**, use alignToNow\n"}, ast.Comment{Text: "// to avoid losing sample data with timestamps outside of the retention period\n"}, ast.Comment{Text: "// associated with your InfluxDB Cloud account.\n"}, ast.Comment{Text: "// Input data must have a `_time` column.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Align sample data to now\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"influxdata/influxdb/sample\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// sample.data(set: \"birdMigration\")\n"}, ast.Comment{Text: "//    |> sample.alignToNow()\n"}, ast.Comment{Text: "// ```\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 11,
							Line:   128,
						},
						File:   "sample.flux",
						Source: "alignToNow",
						Start: ast.Position{
							Column: 1,
							Line:   128,
						},
					},
				},
				Name: "alignToNow",
			},
			Init: &ast.FunctionExpression{
				Arrow: nil,
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   134,
						},
						File:   "sample.flux",
						Source: "(tables=<-) => {\n    _lastTime = (tables |> keep(columns: [\"_time\"]) |> last(column: \"_time\") |> findRecord(fn: (key) => true, idx: 0))._time\n    _offset = int(v: now()) - int(v: _lastTime)\n    _offsetDuration = duration(v: _offset)\n\n    return tables |> timeShift(duration: _offsetDuration)\n}",
						Start: ast.Position{
							Column: 14,
							Line:   128,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   134,
							},
							File:   "sample.flux",
							Source: "{\n    _lastTime = (tables |> keep(columns: [\"_time\"]) |> last(column: \"_time\") |> findRecord(fn: (key) => true, idx: 0))._time\n    _offset = int(v: now()) - int(v: _lastTime)\n    _offsetDuration = duration(v: _offset)\n\n    return tables |> timeShift(duration: _offsetDuration)\n}",
							Start: ast.Position{
								Column: 29,
								Line:   128,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 125,
									Line:   129,
								},
								File:   "sample.flux",
								Source: "_lastTime = (tables |> keep(columns: [\"_time\"]) |> last(column: \"_time\") |> findRecord(fn: (key) => true, idx: 0))._time",
								Start: ast.Position{
									Column: 5,
									Line:   129,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 14,
										Line:   129,
									},
									File:   "sample.flux",
									Source: "_lastTime",
									Start: ast.Position{
										Column: 5,
										Line:   129,
									},
								},
							},
							Name: "_lastTime",
						},
						Init: &ast.MemberExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 125,
										Line:   129,
									},
									File:   "sample.flux",
									Source: "(tables |> keep(columns: [\"_time\"]) |> last(column: \"_time\") |> findRecord(fn: (key) => true, idx: 0))._time",
									Start: ast.Position{
										Column: 17,
										Line:   129,
									},
								},
							},
							Lbrack: nil,
							Object: &ast.ParenExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 119,
											Line:   129,
										},
										File:   "sample.flux",
										Source: "(tables |> keep(columns: [\"_time\"]) |> last(column: \"_time\") |> findRecord(fn: (key) => true, idx: 0))",
										Start: ast.Position{
											Column: 17,
											Line:   129,
										},
									},
								},
								Expression: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.PipeExpression{
											Argument: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   129,
														},
														File:   "sample.flux",
														Source: "tables",
														Start: ast.Position{
															Column: 18,
															Line:   129,
														},
													},
												},
												Name: "tables",
											},
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 52,
														Line:   129,
													},
													File:   "sample.flux",
													Source: "tables |> keep(columns: [\"_time\"])",
													Start: ast.Position{
														Column: 18,
														Line:   129,
													},
												},
											},
											Call: &ast.CallExpression{
												Arguments: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 51,
																Line:   129,
															},
															File:   "sample.flux",
															Source: "columns: [\"_time\"]",
															Start: ast.Position{
																Column: 33,
																Line:   129,
															},
														},
													},
													Lbrace: nil,
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 51,
																	Line:   129,
																},
																File:   "sample.flux",
																Source: "columns: [\"_time\"]",
																Start: ast.Position{
																	Column: 33,
																	Line:   129,
																},
															},
														},
														Comma: nil,
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 40,
																		Line:   129,
																	},
																	File:   "sample.flux",
																	Source: "columns",
																	Start: ast.Position{
																		Column: 33,
																		Line:   129,
																	},
																},
															},
															Name: "columns",
														},
														Separator: nil,
														Value: &ast.ArrayExpression{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 51,
																		Line:   129,
																	},
																	File:   "sample.flux",
																	Source: "[\"_time\"]",
																	Start: ast.Position{
																		Column: 42,
																		Line:   129,
																	},
																},
															},
															Elements: []ast.Expression{&ast.StringLiteral{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 50,
																			Line:   129,
																		},
																		File:   "sample.flux",
																		Source: "\"_time\"",
																		Start: ast.Position{
																			Column: 43,
																			Line:   129,
																		},
																	},
																},
																Value: "_time",
															}},
															Lbrack: nil,
															Rbrack: nil,
														},
													}},
													Rbrace: nil,
													With:   nil,
												}},
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 52,
															Line:   129,
														},
														File:   "sample.flux",
														Source: "keep(columns: [\"_time\"])",
														Start: ast.Position{
															Column: 28,
															Line:   129,
														},
													},
												},
												Callee: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 32,
																Line:   129,
															},
															File:   "sample.flux",
															Source: "keep",
															Start: ast.Position{
																Column: 28,
																Line:   129,
															},
														},
													},
													Name: "keep",
												},
												Lparen: nil,
												Rparen: nil,
											},
										},
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 77,
													Line:   129,
												},
												File:   "sample.flux",
												Source: "tables |> keep(columns: [\"_time\"]) |> last(column: \"_time\")",
												Start: ast.Position{
													Column: 18,
													Line:   129,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 76,
															Line:   129,
														},
														File:   "sample.flux",
														Source: "column: \"_time\"",
														Start: ast.Position{
															Column: 61,
															Line:   129,
														},
													},
												},
												Lbrace: nil,
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 76,
																Line:   129,
															},
															File:   "sample.flux",
															Source: "column: \"_time\"",
															Start: ast.Position{
																Column: 61,
																Line:   129,
															},
														},
													},
													Comma: nil,
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 67,
																	Line:   129,
																},
																File:   "sample.flux",
																Source: "column",
																Start: ast.Position{
																	Column: 61,
																	Line:   129,
																},
															},
														},
														Name: "column",
													},
													Separator: nil,
													Value: &ast.StringLiteral{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 76,
																	Line:   129,
																},
																File:   "sample.flux",
																Source: "\"_time\"",
																Start: ast.Position{
																	Column: 69,
																	Line:   129,
																},
															},
														},
														Value: "_time",
													},
												}},
												Rbrace: nil,
												With:   nil,
											}},
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 77,
														Line:   129,
													},
													File:   "sample.flux",
													Source: "last(column: \"_time\")",
													Start: ast.Position{
														Column: 56,
														Line:   129,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 60,
															Line:   129,
														},
														File:   "sample.flux",
														Source: "last",
														Start: ast.Position{
															Column: 56,
															Line:   129,
														},
													},
												},
												Name: "last",
											},
											Lparen: nil,
											Rparen: nil,
										},
									},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 118,
												Line:   129,
											},
											File:   "sample.flux",
											Source: "tables |> keep(columns: [\"_time\"]) |> last(column: \"_time\") |> findRecord(fn: (key) => true, idx: 0)",
											Start: ast.Position{
												Column: 18,
												Line:   129,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 117,
														Line:   129,
													},
													File:   "sample.flux",
													Source: "fn: (key) => true, idx: 0",
													Start: ast.Position{
														Column: 92,
														Line:   129,
													},
												},
											},
											Lbrace: nil,
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 109,
															Line:   129,
														},
														File:   "sample.flux",
														Source: "fn: (key) => true",
														Start: ast.Position{
															Column: 92,
															Line:   129,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 94,
																Line:   129,
															},
															File:   "sample.flux",
															Source: "fn",
															Start: ast.Position{
																Column: 92,
																Line:   129,
															},
														},
													},
													Name: "fn",
												},
												Separator: nil,
												Value: &ast.FunctionExpression{
													Arrow: nil,
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 109,
																Line:   129,
															},
															File:   "sample.flux",
															Source: "(key) => true",
															Start: ast.Position{
																Column: 96,
																Line:   129,
															},
														},
													},
													Body: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 109,
																	Line:   129,
																},
																File:   "sample.flux",
																Source: "true",
																Start: ast.Position{
																	Column: 105,
																	Line:   129,
																},
															},
														},
														Name: "true",
													},
													Lparen: nil,
													Params: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 100,
																	Line:   129,
																},
																File:   "sample.flux",
																Source: "key",
																Start: ast.Position{
																	Column: 97,
																	Line:   129,
																},
															},
														},
														Comma: nil,
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 100,
																		Line:   129,
																	},
																	File:   "sample.flux",
																	Source: "key",
																	Start: ast.Position{
																		Column: 97,
																		Line:   129,
																	},
																},
															},
															Name: "key",
														},
														Separator: nil,
														Value:     nil,
													}},
													Rparan: nil,
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 117,
															Line:   129,
														},
														File:   "sample.flux",
														Source: "idx: 0",
														Start: ast.Position{
															Column: 111,
															Line:   129,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 114,
																Line:   129,
															},
															File:   "sample.flux",
															Source: "idx",
															Start: ast.Position{
																Column: 111,
																Line:   129,
															},
														},
													},
													Name: "idx",
												},
												Separator: nil,
												Value: &ast.IntegerLiteral{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 117,
																Line:   129,
															},
															File:   "sample.flux",
															Source: "0",
															Start: ast.Position{
																Column: 116,
																Line:   129,
															},
														},
													},
													Value: int64(0),
												},
											}},
											Rbrace: nil,
											With:   nil,
										}},
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 118,
													Line:   129,
												},
												File:   "sample.flux",
												Source: "findRecord(fn: (key) => true, idx: 0)",
												Start: ast.Position{
													Column: 81,
													Line:   129,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 91,
														Line:   129,
													},
													File:   "sample.flux",
													Source: "findRecord",
													Start: ast.Position{
														Column: 81,
														Line:   129,
													},
												},
											},
											Name: "findRecord",
										},
										Lparen: nil,
										Rparen: nil,
									},
								},
								Lparen: nil,
								Rparen: nil,
							},
							Property: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 125,
											Line:   129,
										},
										File:   "sample.flux",
										Source: "_time",
										Start: ast.Position{
											Column: 120,
											Line:   129,
										},
									},
								},
								Name: "_time",
							},
							Rbrack: nil,
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 48,
									Line:   130,
								},
								File:   "sample.flux",
								Source: "_offset = int(v: now()) - int(v: _lastTime)",
								Start: ast.Position{
									Column: 5,
									Line:   130,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   130,
									},
									File:   "sample.flux",
									Source: "_offset",
									Start: ast.Position{
										Column: 5,
										Line:   130,
									},
								},
							},
							Name: "_offset",
						},
						Init: &ast.BinaryExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 48,
										Line:   130,
									},
									File:   "sample.flux",
									Source: "int(v: now()) - int(v: _lastTime)",
									Start: ast.Position{
										Column: 15,
										Line:   130,
									},
								},
							},
							Left: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   130,
											},
											File:   "sample.flux",
											Source: "v: now()",
											Start: ast.Position{
												Column: 19,
												Line:   130,
											},
										},
									},
									Lbrace: nil,
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 27,
													Line:   130,
												},
												File:   "sample.flux",
												Source: "v: now()",
												Start: ast.Position{
													Column: 19,
													Line:   130,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 20,
														Line:   130,
													},
													File:   "sample.flux",
													Source: "v",
													Start: ast.Position{
														Column: 19,
														Line:   130,
													},
												},
											},
											Name: "v",
										},
										Separator: nil,
										Value: &ast.CallExpression{
											Arguments: nil,
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 27,
														Line:   130,
													},
													File:   "sample.flux",
													Source: "now()",
													Start: ast.Position{
														Column: 22,
														Line:   130,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 25,
															Line:   130,
														},
														File:   "sample.flux",
														Source: "now",
														Start: ast.Position{
															Column: 22,
															Line:   130,
														},
													},
												},
												Name: "now",
											},
											Lparen: nil,
											Rparen: nil,
										},
									}},
									Rbrace: nil,
									With:   nil,
								}},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 28,
											Line:   130,
										},
										File:   "sample.flux",
										Source: "int(v: now())",
										Start: ast.Position{
											Column: 15,
											Line:   130,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   130,
											},
											File:   "sample.flux",
											Source: "int",
											Start: ast.Position{
												Column: 15,
												Line:   130,
											},
										},
									},
									Name: "int",
								},
								Lparen: nil,
								Rparen: nil,
							},
							Operator: 6,
							Right: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 47,
												Line:   130,
											},
											File:   "sample.flux",
											Source: "v: _lastTime",
											Start: ast.Position{
												Column: 35,
												Line:   130,
											},
										},
									},
									Lbrace: nil,
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 47,
													Line:   130,
												},
												File:   "sample.flux",
												Source: "v: _lastTime",
												Start: ast.Position{
													Column: 35,
													Line:   130,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 36,
														Line:   130,
													},
													File:   "sample.flux",
													Source: "v",
													Start: ast.Position{
														Column: 35,
														Line:   130,
													},
												},
											},
											Name: "v",
										},
										Separator: nil,
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   130,
													},
													File:   "sample.flux",
													Source: "_lastTime",
													Start: ast.Position{
														Column: 38,
														Line:   130,
													},
												},
											},
											Name: "_lastTime",
										},
									}},
									Rbrace: nil,
									With:   nil,
								}},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 48,
											Line:   130,
										},
										File:   "sample.flux",
										Source: "int(v: _lastTime)",
										Start: ast.Position{
											Column: 31,
											Line:   130,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   130,
											},
											File:   "sample.flux",
											Source: "int",
											Start: ast.Position{
												Column: 31,
												Line:   130,
											},
										},
									},
									Name: "int",
								},
								Lparen: nil,
								Rparen: nil,
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 43,
									Line:   131,
								},
								File:   "sample.flux",
								Source: "_offsetDuration = duration(v: _offset)",
								Start: ast.Position{
									Column: 5,
									Line:   131,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 20,
										Line:   131,
									},
									File:   "sample.flux",
									Source: "_offsetDuration",
									Start: ast.Position{
										Column: 5,
										Line:   131,
									},
								},
							},
							Name: "_offsetDuration",
						},
						Init: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 42,
											Line:   131,
										},
										File:   "sample.flux",
										Source: "v: _offset",
										Start: ast.Position{
											Column: 32,
											Line:   131,
										},
									},
								},
								Lbrace: nil,
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 42,
												Line:   131,
											},
											File:   "sample.flux",
											Source: "v: _offset",
											Start: ast.Position{
												Column: 32,
												Line:   131,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 33,
													Line:   131,
												},
												File:   "sample.flux",
												Source: "v",
												Start: ast.Position{
													Column: 32,
													Line:   131,
												},
											},
										},
										Name: "v",
									},
									Separator: nil,
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 42,
													Line:   131,
												},
												File:   "sample.flux",
												Source: "_offset",
												Start: ast.Position{
													Column: 35,
													Line:   131,
												},
											},
										},
										Name: "_offset",
									},
								}},
								Rbrace: nil,
								With:   nil,
							}},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 43,
										Line:   131,
									},
									File:   "sample.flux",
									Source: "duration(v: _offset)",
									Start: ast.Position{
										Column: 23,
										Line:   131,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 31,
											Line:   131,
										},
										File:   "sample.flux",
										Source: "duration",
										Start: ast.Position{
											Column: 23,
											Line:   131,
										},
									},
								},
								Name: "duration",
							},
							Lparen: nil,
							Rparen: nil,
						},
					}, &ast.ReturnStatement{
						Argument: &ast.PipeExpression{
							Argument: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 18,
											Line:   133,
										},
										File:   "sample.flux",
										Source: "tables",
										Start: ast.Position{
											Column: 12,
											Line:   133,
										},
									},
								},
								Name: "tables",
							},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 58,
										Line:   133,
									},
									File:   "sample.flux",
									Source: "tables |> timeShift(duration: _offsetDuration)",
									Start: ast.Position{
										Column: 12,
										Line:   133,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 57,
												Line:   133,
											},
											File:   "sample.flux",
											Source: "duration: _offsetDuration",
											Start: ast.Position{
												Column: 32,
												Line:   133,
											},
										},
									},
									Lbrace: nil,
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 57,
													Line:   133,
												},
												File:   "sample.flux",
												Source: "duration: _offsetDuration",
												Start: ast.Position{
													Column: 32,
													Line:   133,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 40,
														Line:   133,
													},
													File:   "sample.flux",
													Source: "duration",
													Start: ast.Position{
														Column: 32,
														Line:   133,
													},
												},
											},
											Name: "duration",
										},
										Separator: nil,
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 57,
														Line:   133,
													},
													File:   "sample.flux",
													Source: "_offsetDuration",
													Start: ast.Position{
														Column: 42,
														Line:   133,
													},
												},
											},
											Name: "_offsetDuration",
										},
									}},
									Rbrace: nil,
									With:   nil,
								}},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 58,
											Line:   133,
										},
										File:   "sample.flux",
										Source: "timeShift(duration: _offsetDuration)",
										Start: ast.Position{
											Column: 22,
											Line:   133,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   133,
											},
											File:   "sample.flux",
											Source: "timeShift",
											Start: ast.Position{
												Column: 22,
												Line:   133,
											},
										},
									},
									Name: "timeShift",
								},
								Lparen: nil,
								Rparen: nil,
							},
						},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 58,
									Line:   133,
								},
								File:   "sample.flux",
								Source: "return tables |> timeShift(duration: _offsetDuration)",
								Start: ast.Position{
									Column: 5,
									Line:   133,
								},
							},
						},
					}},
					Lbrace: nil,
					Rbrace: nil,
				},
				Lparen: nil,
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 24,
								Line:   128,
							},
							File:   "sample.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 15,
								Line:   128,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   128,
								},
								File:   "sample.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 15,
									Line:   128,
								},
							},
						},
						Name: "tables",
					},
					Separator: nil,
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 24,
								Line:   128,
							},
							File:   "sample.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 22,
								Line:   128,
							},
						},
					}},
				}},
				Rparan: nil,
			},
		}},
		Eof: nil,
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 15,
						Line:   5,
					},
					File:   "sample.flux",
					Source: "import \"array\"",
					Start: ast.Position{
						Column: 1,
						Line:   5,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   5,
						},
						File:   "sample.flux",
						Source: "\"array\"",
						Start: ast.Position{
							Column: 8,
							Line:   5,
						},
					},
				},
				Value: "array",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   6,
					},
					File:   "sample.flux",
					Source: "import \"dict\"",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   6,
						},
						File:   "sample.flux",
						Source: "\"dict\"",
						Start: ast.Position{
							Column: 8,
							Line:   6,
						},
					},
				},
				Value: "dict",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 26,
						Line:   7,
					},
					File:   "sample.flux",
					Source: "import \"experimental/csv\"",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 26,
							Line:   7,
						},
						File:   "sample.flux",
						Source: "\"experimental/csv\"",
						Start: ast.Position{
							Column: 8,
							Line:   7,
						},
					},
				},
				Value: "experimental/csv",
			},
		}},
		Metadata: "parser-type=rust",
		Name:     "sample.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// Package sample provides functions for downloading and ouputting InfluxDB sample datasets.\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 15,
						Line:   2,
					},
					File:   "sample.flux",
					Source: "package sample",
					Start: ast.Position{
						Column: 1,
						Line:   2,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   2,
						},
						File:   "sample.flux",
						Source: "sample",
						Start: ast.Position{
							Column: 9,
							Line:   2,
						},
					},
				},
				Name: "sample",
			},
		},
	}},
	Package: "sample",
	Path:    "influxdata/influxdb/sample",
}
