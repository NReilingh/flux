// DO NOT EDIT: This file is autogenerated via the builtin command.

package generate

import (
	ast "github.com/influxdata/flux/ast"
	runtime "github.com/influxdata/flux/runtime"
)

func init() {
	runtime.RegisterPackage(pkgAST)
}

var pkgAST = &ast.Package{
	BaseNode: ast.BaseNode{
		Comments: nil,
		Errors:   nil,
		Loc:      nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Comments: nil,
			Errors:   nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 13,
					Line:   72,
				},
				File:   "generate.flux",
				Source: "package generate\n\n// with is a function that generates data using with a schema.\n//\n// ## Parameters\n// - `cardinality` is a record with a mapping of keys to the\n//   desired cardinality for the key. The record must be of a form\n//   where the value for each property is an int.\n//\n//   These keys will get incremented from zero to `n-1` and these\n//   will get passed to the `key` function to generate the group key.\n//\n//   It is not necessary to include keys with a cardinality of one\n//   in the cardinality list. An empty record will invoke the key function\n//   exactly once.\n//\n// - `key` is a function that will return the group key for the given\n//   schema. The schema is a record that matches with the cardinality\n//   given and will take each key in the cardinality and include a value\n//   from zero to `n-1` for that key. The produced group key will be used\n//   to construct a table.\n//\n// - `values` is a function that produces a row for the given group key\n//   at the given index. The output should include the `key` and this is\n//   most easily done with `{key with ...}`.\n//\n// - `n` is the number of points that should be generated for each table.\n//\n// - `seed` will seed the random number generator. This allows the functions\n//   in `experimental/rand` to be used with a custom and consistent seed.\n//\n//   If this is not specified, it will use the random number generator that\n//   is seeded by the engine.\n//\n// ## Example\n//\n// ```\n// import \"experimental/rand\"\n// import \"experimental/generate\"\n//\n// generate.with(\n//   cardinality: {t0: 10},\n//   key: (schema) => ({\n//     _measurement: \"m0\",\n//     _field: \"f0\",\n//     t0: \"t${schema[\"t0\"]}\",\n//   }),\n//   values: (key, index) => ({key with\n//     _value: rand.int(n: 100),\n//   }),\n//   n: 100,\n// )\n//\n// ## Performance Testing\n//\n// This source can be useful for performance testing, but should only\n// be used in the actual query that is being performance tested.\n//\n// To use this with performance testing is easiest when influxdb is used\n// to store and read the generated data. You can use the example above and\n// do this:\n//\n// ```\n// |> to(bucket: \"perftest\")\n// ```\n//\n// Then in a separate query, you can use `from(bucket: \"perftest\")` to read\n// the data back.\n//\n// This source is not meant to be performant on its own.\n// ```\nbuiltin with",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// with is a function that generates data using with a schema.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Parameters\n"}, ast.Comment{Text: "// - `cardinality` is a record with a mapping of keys to the\n"}, ast.Comment{Text: "//   desired cardinality for the key. The record must be of a form\n"}, ast.Comment{Text: "//   where the value for each property is an int.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//   These keys will get incremented from zero to `n-1` and these\n"}, ast.Comment{Text: "//   will get passed to the `key` function to generate the group key.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//   It is not necessary to include keys with a cardinality of one\n"}, ast.Comment{Text: "//   in the cardinality list. An empty record will invoke the key function\n"}, ast.Comment{Text: "//   exactly once.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// - `key` is a function that will return the group key for the given\n"}, ast.Comment{Text: "//   schema. The schema is a record that matches with the cardinality\n"}, ast.Comment{Text: "//   given and will take each key in the cardinality and include a value\n"}, ast.Comment{Text: "//   from zero to `n-1` for that key. The produced group key will be used\n"}, ast.Comment{Text: "//   to construct a table.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// - `values` is a function that produces a row for the given group key\n"}, ast.Comment{Text: "//   at the given index. The output should include the `key` and this is\n"}, ast.Comment{Text: "//   most easily done with `{key with ...}`.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// - `n` is the number of points that should be generated for each table.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// - `seed` will seed the random number generator. This allows the functions\n"}, ast.Comment{Text: "//   in `experimental/rand` to be used with a custom and consistent seed.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//   If this is not specified, it will use the random number generator that\n"}, ast.Comment{Text: "//   is seeded by the engine.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Example\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"experimental/rand\"\n"}, ast.Comment{Text: "// import \"experimental/generate\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// generate.with(\n"}, ast.Comment{Text: "//   cardinality: {t0: 10},\n"}, ast.Comment{Text: "//   key: (schema) => ({\n"}, ast.Comment{Text: "//     _measurement: \"m0\",\n"}, ast.Comment{Text: "//     _field: \"f0\",\n"}, ast.Comment{Text: "//     t0: \"t${schema[\"t0\"]}\",\n"}, ast.Comment{Text: "//   }),\n"}, ast.Comment{Text: "//   values: (key, index) => ({key with\n"}, ast.Comment{Text: "//     _value: rand.int(n: 100),\n"}, ast.Comment{Text: "//   }),\n"}, ast.Comment{Text: "//   n: 100,\n"}, ast.Comment{Text: "// )\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Performance Testing\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// This source can be useful for performance testing, but should only\n"}, ast.Comment{Text: "// be used in the actual query that is being performance tested.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// To use this with performance testing is easiest when influxdb is used\n"}, ast.Comment{Text: "// to store and read the generated data. You can use the example above and\n"}, ast.Comment{Text: "// do this:\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// |> to(bucket: \"perftest\")\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// Then in a separate query, you can use `from(bucket: \"perftest\")` to read\n"}, ast.Comment{Text: "// the data back.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// This source is not meant to be performant on its own.\n"}, ast.Comment{Text: "// ```\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   72,
					},
					File:   "generate.flux",
					Source: "builtin with",
					Start: ast.Position{
						Column: 1,
						Line:   72,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   72,
						},
						File:   "generate.flux",
						Source: "with",
						Start: ast.Position{
							Column: 9,
							Line:   72,
						},
					},
				},
				Name: "with",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 47,
							Line:   78,
						},
						File:   "generate.flux",
						Source: "(\n    cardinality: A,\n    key: (schema: A) => B,\n    values: (key: B, index: int) => C,\n    n: int,\n    ?seed: int,\n) => [C] where A: Record, B: Record, C: Record",
						Start: ast.Position{
							Column: 16,
							Line:   72,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 25,
								Line:   78,
							},
							File:   "generate.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 16,
								Line:   78,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 25,
									Line:   78,
								},
								File:   "generate.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 19,
									Line:   78,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 17,
									Line:   78,
								},
								File:   "generate.flux",
								Source: "A",
								Start: ast.Position{
									Column: 16,
									Line:   78,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 36,
								Line:   78,
							},
							File:   "generate.flux",
							Source: "B: Record",
							Start: ast.Position{
								Column: 27,
								Line:   78,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 36,
									Line:   78,
								},
								File:   "generate.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 30,
									Line:   78,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 28,
									Line:   78,
								},
								File:   "generate.flux",
								Source: "B",
								Start: ast.Position{
									Column: 27,
									Line:   78,
								},
							},
						},
						Name: "B",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 47,
								Line:   78,
							},
							File:   "generate.flux",
							Source: "C: Record",
							Start: ast.Position{
								Column: 38,
								Line:   78,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 47,
									Line:   78,
								},
								File:   "generate.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 41,
									Line:   78,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 39,
									Line:   78,
								},
								File:   "generate.flux",
								Source: "C",
								Start: ast.Position{
									Column: 38,
									Line:   78,
								},
							},
						},
						Name: "C",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 9,
								Line:   78,
							},
							File:   "generate.flux",
							Source: "(\n    cardinality: A,\n    key: (schema: A) => B,\n    values: (key: B, index: int) => C,\n    n: int,\n    ?seed: int,\n) => [C]",
							Start: ast.Position{
								Column: 16,
								Line:   72,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 19,
									Line:   73,
								},
								File:   "generate.flux",
								Source: "cardinality: A",
								Start: ast.Position{
									Column: 5,
									Line:   73,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 16,
										Line:   73,
									},
									File:   "generate.flux",
									Source: "cardinality",
									Start: ast.Position{
										Column: 5,
										Line:   73,
									},
								},
							},
							Name: "cardinality",
						},
						Ty: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 19,
										Line:   73,
									},
									File:   "generate.flux",
									Source: "A",
									Start: ast.Position{
										Column: 18,
										Line:   73,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 19,
											Line:   73,
										},
										File:   "generate.flux",
										Source: "A",
										Start: ast.Position{
											Column: 18,
											Line:   73,
										},
									},
								},
								Name: "A",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   74,
								},
								File:   "generate.flux",
								Source: "key: (schema: A) => B",
								Start: ast.Position{
									Column: 5,
									Line:   74,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   74,
									},
									File:   "generate.flux",
									Source: "key",
									Start: ast.Position{
										Column: 5,
										Line:   74,
									},
								},
							},
							Name: "key",
						},
						Ty: &ast.FunctionType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   74,
									},
									File:   "generate.flux",
									Source: "(schema: A) => B",
									Start: ast.Position{
										Column: 10,
										Line:   74,
									},
								},
							},
							Parameters: []*ast.ParameterType{&ast.ParameterType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   74,
										},
										File:   "generate.flux",
										Source: "schema: A",
										Start: ast.Position{
											Column: 11,
											Line:   74,
										},
									},
								},
								Kind: "Required",
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   74,
											},
											File:   "generate.flux",
											Source: "schema",
											Start: ast.Position{
												Column: 11,
												Line:   74,
											},
										},
									},
									Name: "schema",
								},
								Ty: &ast.TvarType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   74,
											},
											File:   "generate.flux",
											Source: "A",
											Start: ast.Position{
												Column: 19,
												Line:   74,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 20,
													Line:   74,
												},
												File:   "generate.flux",
												Source: "A",
												Start: ast.Position{
													Column: 19,
													Line:   74,
												},
											},
										},
										Name: "A",
									},
								},
							}},
							Return: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 26,
											Line:   74,
										},
										File:   "generate.flux",
										Source: "B",
										Start: ast.Position{
											Column: 25,
											Line:   74,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   74,
											},
											File:   "generate.flux",
											Source: "B",
											Start: ast.Position{
												Column: 25,
												Line:   74,
											},
										},
									},
									Name: "B",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 38,
									Line:   75,
								},
								File:   "generate.flux",
								Source: "values: (key: B, index: int) => C",
								Start: ast.Position{
									Column: 5,
									Line:   75,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   75,
									},
									File:   "generate.flux",
									Source: "values",
									Start: ast.Position{
										Column: 5,
										Line:   75,
									},
								},
							},
							Name: "values",
						},
						Ty: &ast.FunctionType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   75,
									},
									File:   "generate.flux",
									Source: "(key: B, index: int) => C",
									Start: ast.Position{
										Column: 13,
										Line:   75,
									},
								},
							},
							Parameters: []*ast.ParameterType{&ast.ParameterType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   75,
										},
										File:   "generate.flux",
										Source: "key: B",
										Start: ast.Position{
											Column: 14,
											Line:   75,
										},
									},
								},
								Kind: "Required",
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   75,
											},
											File:   "generate.flux",
											Source: "key",
											Start: ast.Position{
												Column: 14,
												Line:   75,
											},
										},
									},
									Name: "key",
								},
								Ty: &ast.TvarType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   75,
											},
											File:   "generate.flux",
											Source: "B",
											Start: ast.Position{
												Column: 19,
												Line:   75,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 20,
													Line:   75,
												},
												File:   "generate.flux",
												Source: "B",
												Start: ast.Position{
													Column: 19,
													Line:   75,
												},
											},
										},
										Name: "B",
									},
								},
							}, &ast.ParameterType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 32,
											Line:   75,
										},
										File:   "generate.flux",
										Source: "index: int",
										Start: ast.Position{
											Column: 22,
											Line:   75,
										},
									},
								},
								Kind: "Required",
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   75,
											},
											File:   "generate.flux",
											Source: "index",
											Start: ast.Position{
												Column: 22,
												Line:   75,
											},
										},
									},
									Name: "index",
								},
								Ty: &ast.NamedType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 32,
												Line:   75,
											},
											File:   "generate.flux",
											Source: "int",
											Start: ast.Position{
												Column: 29,
												Line:   75,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 32,
													Line:   75,
												},
												File:   "generate.flux",
												Source: "int",
												Start: ast.Position{
													Column: 29,
													Line:   75,
												},
											},
										},
										Name: "int",
									},
								},
							}},
							Return: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 38,
											Line:   75,
										},
										File:   "generate.flux",
										Source: "C",
										Start: ast.Position{
											Column: 37,
											Line:   75,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 38,
												Line:   75,
											},
											File:   "generate.flux",
											Source: "C",
											Start: ast.Position{
												Column: 37,
												Line:   75,
											},
										},
									},
									Name: "C",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 11,
									Line:   76,
								},
								File:   "generate.flux",
								Source: "n: int",
								Start: ast.Position{
									Column: 5,
									Line:   76,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 6,
										Line:   76,
									},
									File:   "generate.flux",
									Source: "n",
									Start: ast.Position{
										Column: 5,
										Line:   76,
									},
								},
							},
							Name: "n",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   76,
									},
									File:   "generate.flux",
									Source: "int",
									Start: ast.Position{
										Column: 8,
										Line:   76,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   76,
										},
										File:   "generate.flux",
										Source: "int",
										Start: ast.Position{
											Column: 8,
											Line:   76,
										},
									},
								},
								Name: "int",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 15,
									Line:   77,
								},
								File:   "generate.flux",
								Source: "?seed: int",
								Start: ast.Position{
									Column: 5,
									Line:   77,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   77,
									},
									File:   "generate.flux",
									Source: "seed",
									Start: ast.Position{
										Column: 6,
										Line:   77,
									},
								},
							},
							Name: "seed",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 15,
										Line:   77,
									},
									File:   "generate.flux",
									Source: "int",
									Start: ast.Position{
										Column: 12,
										Line:   77,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 15,
											Line:   77,
										},
										File:   "generate.flux",
										Source: "int",
										Start: ast.Position{
											Column: 12,
											Line:   77,
										},
									},
								},
								Name: "int",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 9,
									Line:   78,
								},
								File:   "generate.flux",
								Source: "[C]",
								Start: ast.Position{
									Column: 6,
									Line:   78,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   78,
									},
									File:   "generate.flux",
									Source: "C",
									Start: ast.Position{
										Column: 7,
										Line:   78,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 8,
											Line:   78,
										},
										File:   "generate.flux",
										Source: "C",
										Start: ast.Position{
											Column: 7,
											Line:   78,
										},
									},
								},
								Name: "C",
							},
						},
					},
				},
			},
		}},
		Eof:      nil,
		Imports:  nil,
		Metadata: "parser-type=rust",
		Name:     "generate.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   1,
					},
					File:   "generate.flux",
					Source: "package generate",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   1,
						},
						File:   "generate.flux",
						Source: "generate",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "generate",
			},
		},
	}},
	Package: "generate",
	Path:    "experimental/generate",
}
